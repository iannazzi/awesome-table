(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["AwesomeTable"] = factory();
	else
		root["AwesomeTable"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/table/AwesomeTable.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/thenby/thenBy.module.js":
/*!**********************************************!*\
  !*** ./node_modules/thenby/thenBy.module.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/***\n   Copyright 2013 Teun Duynstee\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\nmodule.exports = (function() {\n\n    function identity(v){return v;}\n\n    function ignoreCase(v){return typeof(v)===\"string\" ? v.toLowerCase() : v;}\n\n    function makeCompareFunction(f, opt){\n        opt = typeof(opt)===\"number\" ? {direction:opt} : opt||{};\n        if(typeof(f)!=\"function\"){\n            var prop = f;\n            // make unary function\n            f = function(v1){return !!v1[prop] ? v1[prop] : \"\";}\n        }\n        if(f.length === 1) {\n            // f is a unary function mapping a single item to its sort score\n            var uf = f;\n            var preprocess = opt.ignoreCase?ignoreCase:identity;\n            f = function(v1,v2) {return preprocess(uf(v1)) < preprocess(uf(v2)) ? -1 : preprocess(uf(v1)) > preprocess(uf(v2)) ? 1 : 0;}\n        }\n        if(opt.direction === -1) return function(v1,v2){return -f(v1,v2)};\n        return f;\n    }\n\n    /* adds a secondary compare function to the target function (`this` context)\n       which is applied in case the first one returns 0 (equal)\n       returns a new compare function, which has a `thenBy` method as well */\n    function tb(func, opt) {\n        var x = typeof(this) == \"function\" ? this : false;\n        var y = makeCompareFunction(func, opt);\n        var f = x ? function(a, b) {\n                        return x(a,b) || y(a,b);\n                    }\n                  : y;\n        f.thenBy = tb;\n        return f;\n    }\n    return tb;\n})();\n\n\n//# sourceURL=webpack://AwesomeTable/./node_modules/thenby/thenBy.module.js?");

/***/ }),

/***/ "./src/lib/array_help.js":
/*!*******************************!*\
  !*** ./src/lib/array_help.js ***!
  \*******************************/
/*! exports provided: is_array, show2DArray, dumpProps, isValueInArray, getJSONKeys, tryParseJSON, parseJSONdata, arrayMin, arrayMax */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"is_array\", function() { return is_array; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"show2DArray\", function() { return show2DArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dumpProps\", function() { return dumpProps; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isValueInArray\", function() { return isValueInArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getJSONKeys\", function() { return getJSONKeys; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tryParseJSON\", function() { return tryParseJSON; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parseJSONdata\", function() { return parseJSONdata; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arrayMin\", function() { return arrayMin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arrayMax\", function() { return arrayMax; });\n/**\r\n * Created by embrasse-moi on 1/20/17.\r\n */\r\nfunction is_array(input)\r\n{\r\n    return typeof(input)=='object'&&(input instanceof Array);\r\n}\r\nfunction show2DArray(array)\r\n{\r\n    debug = '';\r\n    for (i=0;i<array.length;i++)\r\n    {\r\n        for(j=0;j<array[0].length;j++)\r\n        {\r\n            debug = debug + ' ' + array[i][j];\r\n        }\r\n        debug = debug + \"\\r\\n\";\r\n    }\r\n    alert(debug);\r\n}\r\nfunction dumpProps(obj, parent) {\r\n    //This function goes through an object and states the index and the property recusively\r\n    // usage dumpProps(object);\r\n\r\n    // Go through all the properties of the passed-in object\r\n    for (var i in obj)\r\n    {\r\n        // if a parent (2nd parameter) was passed in, then use that to\r\n        // build the message. Message includes i (the object's property name)\r\n        // then the object's property value on a new line\r\n        if (parent) { var msg = parent + \".\" + i + \"\\n\" + obj[i]; } else { var msg = i + \"\\n\" + obj[i]; }\r\n        // Display the message. If the user clicks \"OK\", then continue. If they\r\n        // click \"CANCEL\" then quit this level of recursion\r\n        if (!confirm(msg)) { return; }\r\n        // If this property (i) is an object, then recursively process the object\r\n        if (typeof obj[i] == \"object\")\r\n        {\r\n            if (parent) { dumpProps(obj[i], parent + \".\" + i); } else { dumpProps(obj[i], i); }\r\n        }\r\n    }\r\n}\r\nfunction isValueInArray(value, array)\r\n{\r\n    let found = false;\r\n    for(let i=0;i<array.length;i++)\r\n    {\r\n        if (array[i] == value)\r\n        {\r\n            found = true;\r\n        }\r\n    }\r\n    return found;\r\n}\r\nfunction getJSONKeys(json_data)\r\n{\r\n    var keys = [];\r\n    json_object = JSON.parse(json_data);\r\n    for(var k in json_object)\r\n    {\r\n        keys.push(k);\r\n        console.log(k);\r\n    }\r\n    return keys;\r\n}\r\nfunction tryParseJSON (jsonString){\r\n    try {\r\n        var o = JSON.parse(jsonString);\r\n\r\n        // Handle non-exception-throwing cases:\r\n        // Neither JSON.parse(false) or JSON.parse(1234) throw errors, hence the type-checking,\r\n        // but... JSON.parse(null) returns 'null', and typeof null === \"object\",\r\n        // so we must check for that, too.\r\n        if (o && typeof o === \"object\" && o !== null) {\r\n            return o;\r\n        }\r\n    }\r\n    catch (e) { }\r\n\r\n    return false;\r\n};\r\nfunction parseJSONdata(json)\r\n{\r\n    if(json == '')\r\n    {\r\n        obj = new Array();\r\n    }\r\n    else\r\n    {\r\n        obj = JSON && JSON.parse(json) || $.parseJSON(json);\r\n    }\r\n    return obj;\r\n}\r\nfunction arrayMin(arr) {\r\n    var len = arr.length, min = Infinity;\r\n    while (len--) {\r\n        if (arr[len] < min) {\r\n            min = arr[len];\r\n        }\r\n    }\r\n    return min;\r\n}\r\nfunction arrayMax(arr) {\r\n    var len = arr.length, max = -Infinity;\r\n    while (len--) {\r\n        if (arr[len] > max) {\r\n            max = arr[len];\r\n        }\r\n    }\r\n    return max;\r\n}\r\n\n\n//# sourceURL=webpack://AwesomeTable/./src/lib/array_help.js?");

/***/ }),

/***/ "./src/lib/math.js":
/*!*************************!*\
  !*** ./src/lib/math.js ***!
  \*************************/
/*! exports provided: round, isNumber, round2, myParseFloat, myParseInt, permute */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"round\", function() { return round; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isNumber\", function() { return isNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"round2\", function() { return round2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"myParseFloat\", function() { return myParseFloat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"myParseInt\", function() { return myParseInt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"permute\", function() { return permute; });\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./strings */ \"./src/lib/strings.js\");\n/**\r\n * Created by embrasse-moi on 1/20/17.\r\n */\r\n\r\nfunction round(num, dec)\r\n{\r\n    var result = Math.round(num*Math.pow(10,dec))/Math.pow(10,dec);\r\n    return result;\r\n}\r\nfunction isNumber(n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n}\r\nfunction round2(num, dec)\r\n{\r\n    if(Object(_strings__WEBPACK_IMPORTED_MODULE_0__[\"trim\"])(num) == '')\r\n    {\r\n        num = 0;\r\n    }\r\n\r\n    if (!isNaN(num))\r\n    {\r\n\r\n        let number=parseFloat(num);\r\n        number = Math.round(num*Math.pow(10,dec))/Math.pow(10,dec);\r\n        return number.toFixed(dec); //not rounding up...\r\n        //return number.round(dec);\r\n\r\n    }\r\n    else\r\n    {\r\n        return num;\r\n    }\r\n}\r\nfunction myParseFloat(value)\r\n{\r\n    if(value =='' || value == '0' || value =='null' || value == null)\r\n    {\r\n        return 0;\r\n    }\r\n    else\r\n    {\r\n        return parseFloat(value);\r\n    }\r\n}\r\nfunction myParseInt(value)\r\n{\r\n    if(value =='' || value == '0' || value =='null' || value == null)\r\n    {\r\n        return 0;\r\n    }\r\n    else\r\n    {\r\n        return parseInt(value);\r\n    }\r\n}\r\nfunction permute(input)\r\n{\r\n    var permArr = [],\r\n        usedChars = [];\r\n    function main(){\r\n        var i, ch;\r\n        for (i = 0; i < input.length; i++) {\r\n            ch = input.splice(i, 1)[0];\r\n            usedChars.push(ch);\r\n            if (input.length == 0) {\r\n                permArr.push(usedChars.slice());\r\n            }\r\n            main();\r\n            input.splice(i, 0, ch);\r\n            usedChars.pop();\r\n        }\r\n        return permArr;\r\n    }\r\n    return main();\r\n}\n\n//# sourceURL=webpack://AwesomeTable/./src/lib/math.js?");

/***/ }),

/***/ "./src/lib/strings.js":
/*!****************************!*\
  !*** ./src/lib/strings.js ***!
  \****************************/
/*! exports provided: addslashes, hasWhiteSpace, trim */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addslashes\", function() { return addslashes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hasWhiteSpace\", function() { return hasWhiteSpace; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"trim\", function() { return trim; });\n/**\r\n * Created by embrasse-moi on 1/20/17.\r\n */\r\n\r\nfunction addslashes (str) {\r\n    // Escapes single quote, double quotes and backslash characters in a string with backslashes\r\n    //\r\n    // version: 1109.2015\r\n    // discuss at: http://phpjs.org/functions/addslashes    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\r\n    // +   improved by: Ates Goral (http://magnetiq.com)\r\n    // +   improved by: marrtins\r\n    // +   improved by: Nate\r\n    // +   improved by: Onno Marsman    // +   input by: Denny Wardhana\r\n    // +   improved by: Brett Zamir (http://brett-zamir.me)\r\n    // +   improved by: Oskar Larsson Högfeldt (http://oskar-lh.name/)\r\n    // *     example 1: addslashes(\"kevin's birthday\");\r\n    // *     returns 1: 'kevin\\'s birthday'\r\n    return (str + '').replace(/[\\\\\"']/g, '\\\\$&').replace(/\\u0000/g, '\\\\0');\r\n}\r\nfunction hasWhiteSpace(s) {\r\n    return /\\s/g.test(s);\r\n}\r\nfunction trim(strText)\r\n{\r\n    strText += '';\r\n    strText=strText.replace('\\t','');\r\n    //alert(strText.length);\r\n    // this will get rid of leading spaces - not tab however\r\n    while (strText.substring(0,1) == ' ')\r\n    {\r\n        strText = strText.substring(1, strText.length);\r\n    }\r\n\r\n    // this will get rid of trailing spaces\r\n    while (strText.substring(strText.length-1,strText.length) == ' ')\r\n    {\r\n        strText = strText.substring(0, strText.length-1);\r\n    }\r\n    //alert(strText.length);\r\n    return strText;\r\n}\n\n//# sourceURL=webpack://AwesomeTable/./src/lib/strings.js?");

/***/ }),

/***/ "./src/table/AwesomeTable.js":
/*!***********************************!*\
  !*** ./src/table/AwesomeTable.js ***!
  \***********************************/
/*! exports provided: AwesomeTable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AwesomeTable\", function() { return AwesomeTable; });\n/* harmony import */ var _RecordTableView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RecordTableView */ \"./src/table/RecordTableView.js\");\n/* harmony import */ var _RecordTableController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RecordTableController */ \"./src/table/RecordTableController.js\");\n/* harmony import */ var _CollectionTableView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CollectionTableView */ \"./src/table/CollectionTableView.js\");\n/* harmony import */ var _CollectionTableController__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CollectionTableController */ \"./src/table/CollectionTableController.js\");\n/* harmony import */ var _TableModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./TableModel */ \"./src/table/TableModel.js\");\n/* harmony import */ var _SearchTableView__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SearchTableView */ \"./src/table/SearchTableView.js\");\n/* harmony import */ var _SearchTableController__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SearchTableController */ \"./src/table/SearchTableController.js\");\n/* harmony import */ var _ColumnDefinition__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ColumnDefinition */ \"./src/table/ColumnDefinition.js\");\n/* harmony import */ var _TableDefinition__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./TableDefinition */ \"./src/table/TableDefinition.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass AwesomeTable {\r\n    constructor(type, name) {\r\n\r\n        //this is very useful for development with the table, however in production it is not necessary????\r\n        //maybe the consumer's processor will strip it out? possibly tree shaking? anyway the consumer may\r\n        //use this code to simplify table creation....\r\n        this.ColumnDefinition = new _ColumnDefinition__WEBPACK_IMPORTED_MODULE_7__[\"ColumnDefinition\"](this);\r\n        this.TableDefinition = new _TableDefinition__WEBPACK_IMPORTED_MODULE_8__[\"TableDefinition\"](this);\r\n\r\n        //return access to a model view and controller ... then set your callbacks on these to interface with your app\r\n        //\r\n\r\n        this.type = type;\r\n\r\n        switch (type) {\r\n            case 'record':\r\n                this.model = new _TableModel__WEBPACK_IMPORTED_MODULE_4__[\"TableModel\"](name);\r\n                this.view = new _RecordTableView__WEBPACK_IMPORTED_MODULE_0__[\"RecordTableView\"](this.model);\r\n                this.controller = new _RecordTableController__WEBPACK_IMPORTED_MODULE_1__[\"RecordTableController\"](this.model, this.view);\r\n                break;\r\n            case 'collection':\r\n                this.model = new _TableModel__WEBPACK_IMPORTED_MODULE_4__[\"TableModel\"]();\r\n                this.view = new _CollectionTableView__WEBPACK_IMPORTED_MODULE_2__[\"CollectionTableView\"](this.model);\r\n                this.controller = new _CollectionTableController__WEBPACK_IMPORTED_MODULE_3__[\"CollectionTableController\"](this.model, this.view);\r\n                break;\r\n            case 'searchable':\r\n                this.model = new _TableModel__WEBPACK_IMPORTED_MODULE_4__[\"TableModel\"]();\r\n                this.view = new _SearchTableView__WEBPACK_IMPORTED_MODULE_5__[\"SearchTableView\"](this.model);\r\n                this.controller = new _SearchTableController__WEBPACK_IMPORTED_MODULE_6__[\"SearchTableController\"](this.model, this.view);\r\n                break;\r\n            default:\r\n                console.log('missed the type in the table definition');\r\n        }\r\n    }\r\n\r\n    columnDefinition(){\r\n        //how about some sensible default values?\r\n\r\n\r\n\r\n\r\n    }\r\n    loadConfiguration(options) {\r\n        this.model.td = options;\r\n        this.model.loadColumnDefinition(options.column_definition);\r\n        //if there is data load it....\r\n        if (options.data !== 'undefined') {\r\n            if (this.type == 'record')\r\n            {\r\n                this.model.loadData([options.data]);\r\n\r\n            }\r\n            else{\r\n                this.model.loadData(options.data);\r\n\r\n            }\r\n        }\r\n\r\n        //the table type is used to show/hide columns on edit, create, view ....\r\n        switch (this.type) {\r\n            case 'record':\r\n                if(typeof options.table_view == 'undefined'){\r\n                    this.model.td.table_view = 'show';\r\n                }\r\n                break;\r\n            case 'collection':\r\n                this.model.td.table_view = 'index';\r\n                break;\r\n            case 'searchable':\r\n                this.model.td.table_view = 'index';\r\n                break;\r\n            default:\r\n                console.log('missed the type in the table definition');\r\n        }\r\n\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    addTo(div_id) {\r\n        this.div = document.getElementById(div_id);\r\n        this.div.appendChild(this.getTable());\r\n        //if it is searchable then we need to load values to the search table\r\n        if(this.type =='searchable'){\r\n            //now we need to decide on how to populate the search values\r\n            //\r\n            //url -- we entered a page with the url\r\n            //storage\r\n            //default\r\n            //awesomeTable.controller.loadPageEvent.notify()\r\n        }\r\n\r\n    }\r\n\r\n    renderSearchResults(data){\r\n        this.controller.renderSearch(data)\r\n    }\r\n\r\n    getTable() {\r\n        switch (this.type) {\r\n            case 'record':\r\n                return this.view.createRecordTable();\r\n                break;\r\n            case 'collection':\r\n                return this.view.createCollectionTable();\r\n                break;\r\n            case 'searchable':\r\n                return this.view.createSearchTable();\r\n                break;\r\n            default:\r\n                console.log('missed the type in the table definition');\r\n        }\r\n\r\n\r\n    }\r\n\r\n    clone(obj) {\r\n        var copy;\r\n\r\n        // Handle the 3 simple types, and null or undefined\r\n        if (null == obj || \"object\" != typeof obj) return obj;\r\n\r\n        // Handle Date\r\n        if (obj instanceof Date) {\r\n            copy = new Date();\r\n            copy.setTime(obj.getTime());\r\n            return copy;\r\n        }\r\n\r\n        // Handle Array\r\n        if (obj instanceof Array) {\r\n            copy = [];\r\n            for (var i = 0, len = obj.length; i < len; i++) {\r\n                copy[i] = this.clone(obj[i]);\r\n            }\r\n            return copy;\r\n        }\r\n\r\n        // Handle Object\r\n        if (obj instanceof Object) {\r\n            copy = {};\r\n            for (var attr in obj) {\r\n                if (obj.hasOwnProperty(attr)) copy[attr] = this.clone(obj[attr]);\r\n            }\r\n            return copy;\r\n        }\r\n\r\n        throw new Error(\"Unable to copy obj! Its type isn't supported.\");\r\n    }\r\n\r\n    setValue(column_name, row, value) {\r\n\r\n        this.controller.updateCellValue(column_name, row, value)\r\n\r\n    }\r\n\r\n\r\n\r\n    reCalculateTable(rowFunctions) {\r\n\r\n    }\r\n\r\n\r\n    getCellByName(db_field, r, c = 'undefined') {\r\n        if (c !== 'undefined') {\r\n            return this.view.cells_by_name[r][db_field][c];\r\n        }\r\n        else {\r\n            return this.view.cells_by_name[r][db_field];\r\n        }\r\n    }\r\n\r\n    getRow(element) {\r\n\r\n\r\n        let rc = this.controller.findElement(element);\r\n        return rc[0];\r\n\r\n    }\r\n    addDataRow(data_row){\r\n        //seems silly, but the consumer will use this a lot... so put a reference here..\r\n        this.controller.addDataRow(data_row)\r\n    }\r\n    addDataArray(data){\r\n        //seems silly, but the consumer will use this a lot... so put a reference here..\r\n        this.controller.addDataArray(data)\r\n    }\r\n\r\n    sumArray(column_name, row) {\r\n        return this.model.sumArray(column_name, row);\r\n    }\r\n\r\n    developerAlert(msg) {\r\n        let warning = 'console' //alert\r\n        if (warning == 'console') {\r\n            console.log('Developer Alert! \\n' + msg)\r\n        }\r\n        else {\r\n            alert('Developer Alert! \\n' + msg);\r\n        }\r\n\r\n    }\r\n\r\n    checkRowNumber(row_number) {\r\n        if (typeof this.model.tdo[row_number] === 'undefined') {\r\n            this.developerAlert('the row number ' + row_number + ' is undefined, fix your call....')\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    checkColumnName(column_name) {\r\n        if (typeof this.model.tdo[0][column_name] === 'undefined') {\r\n            this.developerAlert('the column name ' + column_name + ' is undefined, fix your call....')\r\n            return\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getValue(column_name, row_number, array_index) {\r\n        //check row number and column_name\r\n        if (!this.checkRowNumber(row_number)) return\r\n        if (!this.checkColumnName(column_name)) return\r\n\r\n\r\n\r\n        if (typeof array_index !== 'undefined') {\r\n            return this.model.tdo[row_number][column_name].data[array_index]\r\n        }\r\n        else {\r\n            return this.model.tdo[row_number][column_name].data\r\n        }\r\n\r\n\r\n    }\r\n\r\n    getSelectName(column, value) {\r\n        //should not matter if it is modal or not\r\n        return this.controller.getSelectValueName(column, value);\r\n\r\n    }\r\n\r\n\r\n    removeResultsTable() {\r\n        this.searchController.view.destroyCollectionTable();\r\n    }\r\n\r\n\r\n\r\n}\n\n//# sourceURL=webpack://AwesomeTable/./src/table/AwesomeTable.js?");

/***/ }),

/***/ "./src/table/CollectionTableController.js":
/*!************************************************!*\
  !*** ./src/table/CollectionTableController.js ***!
  \************************************************/
/*! exports provided: CollectionTableController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CollectionTableController\", function() { return CollectionTableController; });\n/* harmony import */ var _TableController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TableController */ \"./src/table/TableController.js\");\n/* harmony import */ var _CollectionTableEvents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CollectionTableEvents */ \"./src/table/CollectionTableEvents.js\");\n/* harmony import */ var _SortController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SortController */ \"./src/table/SortController.js\");\n/**\r\n * Created by embrasse-moi on 1/19/17.\r\n */\r\n\r\n\r\n\r\n\r\n\r\nclass CollectionTableController extends _TableController__WEBPACK_IMPORTED_MODULE_0__[\"TableController\"] {\r\n    constructor(model, view) {\r\n        super(model);\r\n        this.view = view;\r\n        this.cdo = this.model.cdo;\r\n        this.active_row = null;\r\n        this.collectionTableEvents = new _CollectionTableEvents__WEBPACK_IMPORTED_MODULE_1__[\"CollectionTableEvents\"](this);\r\n        this.row_properties = []\r\n        this.sort = new _SortController__WEBPACK_IMPORTED_MODULE_2__[\"SortController\"](this);\r\n\r\n    }\r\n\r\n\r\n    addNewRow() {\r\n\r\n        this.copyTable();\r\n        let row = this.model.addNewRow();\r\n        this.view.drawTbody();\r\n        this.updateTable();\r\n        return row\r\n    }\r\n\r\n    deleteRow(check = true) {\r\n\r\n        if (this.model.tdo.length > 0) {\r\n            let checked_rows = this.findCheckedRows();\r\n            if (checked_rows.length > 0) {\r\n                this.copyTable();\r\n                this.model.deleteRows(checked_rows);\r\n            }\r\n        }\r\n        this.view.drawTable();\r\n\r\n\r\n        //finally there usually is a calculateTotals() function needed to update totals\r\n        //ifCalculateTotalsExists();\r\n\r\n    }\r\n\r\n    copyRow() {\r\n        this.copyTable();\r\n        let checked_rows = this.findCheckedRows();\r\n        if (checked_rows.length > 0) {\r\n            this.model.copyRows(checked_rows);\r\n        }\r\n        this.view.drawTable();\r\n    }\r\n\r\n    selectAll() {\r\n        if (this.model.getColDef('row_checkbox')) {\r\n            this.model.tdo.forEach((row, r) => {\r\n                this.model.tdo[r]['row_checkbox'].data = 1;\r\n            });\r\n        }\r\n        this.view.drawTable();\r\n    }\r\n\r\n    selectNone() {\r\n        if (this.model.getColDef('row_checkbox')) {\r\n            this.model.tdo.forEach((row, r) => {\r\n                this.model.tdo[r]['row_checkbox'].data = 0;\r\n            });\r\n        }\r\n        this.view.drawTable();\r\n\r\n    }\r\n\r\n    moveRowUp() {\r\n        let checked_rows = this.findCheckedRows();\r\n        let bln_move_ok = true;\r\n        for (let i = 0; i < checked_rows.length; i++) {\r\n            if ((checked_rows[i] - 1) < 0) bln_move_ok = false\r\n        }\r\n        if (bln_move_ok) {\r\n            this.copyTable();\r\n            for (let i = 0; i < checked_rows.length; i++) {\r\n                this.model.moveRow(checked_rows[i], checked_rows[i] - 1);\r\n                //this.setChecks(checked_rows[i], checked_rows[i]-1);\r\n            }\r\n        }\r\n        this.view.drawTable();\r\n\r\n    }\r\n\r\n    moveRowDown() {\r\n        let checked_rows = this.findCheckedRows();\r\n        let bln_move_ok = true;\r\n        for (let i = 0; i < checked_rows.length; i++) {\r\n            if ((checked_rows[i] + 1) > this.model.tdo.length - 1) bln_move_ok = false\r\n        }\r\n        if (bln_move_ok) {\r\n            this.copyTable();\r\n            for (let i = checked_rows.length - 1; i > -1; i--) {\r\n                let newRow = parseInt(checked_rows[i]) + parseInt(1);\r\n                this.model.moveRow(checked_rows[i], newRow);\r\n            }\r\n\r\n        }\r\n        this.view.drawTable();\r\n\r\n    }\r\n\r\n    deleteAllRows() {\r\n        this.model.DeleteAllRows();\r\n        this.view.drawTable();\r\n    }\r\n\r\n\r\n    findCheckedRows() {\r\n        //this only works on the first column\r\n        let tbody = this.view.tbody;\r\n        let rowCount = tbody.rows.length;\r\n        let checked_rows = new Array();\r\n        let counter = 0;\r\n        for (let k = 0; k < rowCount; k++) {\r\n            let chkbox = tbody.rows[k].cells[0].childNodes[0];\r\n\r\n            if ((null != chkbox) && (true == chkbox.checked)) {\r\n                checked_rows[counter] = k;\r\n                counter = counter + 1;\r\n            }\r\n        }\r\n        return checked_rows;\r\n    }\r\n\r\n    copyTable() {\r\n\r\n        //this should be a bit easier now.....\r\n        for(let r=0; r<this.view.tbody_cells.length;r++){\r\n            this.copyRowToModel(r)\r\n        }\r\n\r\n        //old way.....kinda a mix of dom and not dom....\r\n        //got to go back through the col_def... awk\r\n\r\n        // let tbody = this.view.tbody;\r\n        // let rowCount = tbody.rows.length;\r\n        // for (let r = 0; r < rowCount; r++) {\r\n        //     this.model.cdo.forEach((col_def) => {\r\n        //         if (typeof col_def['show_on_list'] === 'undefined' || col_def['show_on_list']) {\r\n        //             if (typeof col_def.caption !== 'undefined' && Array.isArray(col_def.caption)) {\r\n        //\r\n        //                 col_def.caption[0].forEach((caption_row, col) => {\r\n        //                     let element = this.view.elements[r][col_def.db_field][col];\r\n        //                     this.copyElementValueToModel(element, col_def, r, col);\r\n        //                 });\r\n        //             }\r\n        //             else {\r\n        //                 let element = this.view.elements[r][col_def.db_field]\r\n        //                 this.copyElementValueToModel(element, col_def, r);\r\n        //             }\r\n        //         }\r\n        //     })\r\n        // }\r\n    }\r\n    copyRowToModel(r){\r\n\r\n        //loop through the table cells array....\r\n        //pull the input element\r\n\r\n        let row = this.view.tbody_cells[r];\r\n\r\n        for (let c = 0; c < row.length; c++) {\r\n            let col_def = row[c].col_def;\r\n            let data = this.model.tdo[r][col_def.db_field].data\r\n\r\n            if(Array.isArray(data)){\r\n                for(let i=0;i<data.length;i++){\r\n                    this.copyElementValueToModel(row[c].td.childNodes[0], col_def, r, i)\r\n                    c++;\r\n                }\r\n                c--;\r\n            }\r\n            else{\r\n                //basic td data will be converted to text here.... otherwise we have an element that has element.value\r\n                let input_element = row[c].td.childNodes[0];\r\n                this.copyElementValueToModel(input_element, col_def, r)\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n    selectRow(row){\r\n        this.active_row = row;\r\n        this.view.highlightRow(row);\r\n        //highlight the header array if one or two is used for the row\r\n        let header_array_data = this.model.tdo[row].__row__.header_row;\r\n        //if it is empty there should be no header row highlighted...\r\n\r\n        for (var key in header_array_data)\r\n        {\r\n            this.view.highlightHeaderRow(key, header_array_data[key])\r\n        }\r\n        if(typeof this.model.td.onRowClick === 'function'){\r\n            this.model.td.onRowClick(row);\r\n        }\r\n\r\n\r\n\r\n    }\r\n    headerClick(name){\r\n\r\n    }\r\n    selectHeaderRow(db_field, header_row ) {\r\n\r\n        if (this.active_row !== null) {\r\n            this.model.tdo[this.active_row].__row__.header_row[db_field] = header_row;\r\n        }\r\n\r\n        this.view.highlightHeaderRow(db_field, header_row)\r\n\r\n    }\r\n\r\n    addDataRow(data_row) {\r\n\r\n        if (Array.isArray(data_row)) {\r\n            this.developerAlert('data is an array, just send in one row or use addDataArray')\r\n            return false;\r\n        }\r\n        //add a row to the model, then re-draw the table......\r\n\r\n        let row = this.model.addDataRow(data_row);\r\n        //we need to reDraw and update values... w\r\n        //redraw tbody\r\n        //this.view.drawTable();\r\n        //recalculate values....\r\n\r\n        this.view.drawTbody();\r\n\r\n        this.updateTable()\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    addDataArray(data) {\r\n\r\n        if (!Array.isArray(data)) {\r\n            this.developerAlert('data is not an array.... use addDataRow for just one row')\r\n            return false;\r\n        }\r\n        for (let i = 0; i < data.length; i++) {\r\n            this.addDataRow(data[i]);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    updateTable(){\r\n\r\n        this.model.calculate();\r\n        this.view.updateTableValues();\r\n    }\r\n\r\n    setFocusToFirstInputOfRow(row_number) {\r\n\r\n\r\n\r\n        let elements = this.view.elements_array[row_number];\r\n        for (let i = 0; i < elements.length; i++) {\r\n            if (elements[i].type == 'text' || elements[i].type == 'number') {\r\n                elements[i].focus();\r\n                elements[i].select();\r\n                break;\r\n            }\r\n        }\r\n        this.active_row = row_number;\r\n\r\n    }\r\n\r\n\r\n    //everything below this line should be deleted after i get posting complete\r\n\r\n\r\n    validateDynamicTableObject() {\r\n        //this should be the same function as above, but check each row....\r\n        errors = '';\r\n\r\n        for (i = 0; i < this.model.cdo.length; i++) {\r\n            if (typeof this.model.cdo[i]['db_field'] !== 'undefined') {\r\n                if (typeof this.model.cdo[i]['validate'] !== 'undefined') {\r\n                    // go through each row\r\n                    var elements = document.getElementsByName(this.model.cdo[i]['db_field'] + '[]');\r\n                    for (el = 0; el < elements.length; el++) {\r\n                        if (typeof this.model.cdo[i]['validate']['not_blank_or_zero_or_false_or_null'] !== 'undefined') {\r\n                            if (elements[el].value == '' ||\r\n                                round2(elements[el].value, 0) == 0 || elements[el].value == 'false' || elements[el].value == 'NULL') {\r\n                                errors += 'Bad Value For ' + this.model.cdo[i]['caption'] + ' Row ' + (el + 1) + newline();\r\n                            }\r\n                        }\r\n                        else if (typeof this.model.cdo[i]['validate']['acceptable_values'] !== 'undefined') {\r\n                            acceptable_values = this.model.cdo[i]['validate']['acceptable_values'][0];\r\n                            if (acceptable_value == 'number') {\r\n                                if (isNaN(elements[el].value)) {\r\n                                    errors += this.model.cdo[i]['db_field'] + ' needs to be a value.' + newline();\r\n                                    elements[el].focus();\r\n                                }\r\n                            }\r\n                            else if (acceptable_values == 'text') {\r\n                            }\r\n                            else if (acceptable_values == 'specific') {\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (errors == '') {\r\n            needToConfirm = false;\r\n            //disable the submit button: (id'd as submit)\r\n            if (document.getElementById('submit')) {\r\n                document.getElementById('submit').disabled = true;\r\n                //getting rid of form stuff....\r\n                /*//create hidden post value\r\n                 str_hidden_name = \"submit\";\r\n                 str_hidden_value = \"submit\";\r\n                 //creating the hidden elements for POST\r\n                 element = document.createElement(\"input\");\r\n                 element.type = \"hidden\";\r\n                 element.name = str_hidden_name;\r\n                 element.value = str_hidden_value;\r\n                 document.getElementById(this.formId).appendChild(element);*/\r\n            }\r\n            else {\r\n            }\r\n            /*else if(typeof document.getElementsByName('submit')[0] !== 'undefined')\r\n             {\r\n\r\n             document.getElementsByName('submit')[0].disabled = true;\r\n\r\n             }*/\r\n            return true;\r\n        }\r\n        else {\r\n            alert(errors);\r\n            needToConfirm = true;\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    getTableArrayColumnNumberFromHTMLColumnNumber(html_column) {\r\n        let column = -1;\r\n        let table_data_array_column = 0;\r\n        let html_column_counter = 0;\r\n        for (i = 0; i < this.model.cdo.length; i++) {\r\n            if (this.model.cdo[i]['show_on_list'] === false) {\r\n                html_column_counter = html_column_counter + 1;\r\n            }\r\n            table_data_array_column = table_data_array_column + 1;\r\n            if (html_column == html_column_counter) {\r\n                return table_data_array_column;\r\n            }\r\n        }\r\n        return column;\r\n    }\r\n\r\n    setChecks(rowMoving, movingTo) {\r\n        let tbody = this.view.tbody;\r\n        tbody.rows[rowMoving].cells[0].childNodes[0].checked = false;\r\n        tbody.rows[movingTo].cells[0].childNodes[0].checked = true;\r\n\r\n    }\r\n\r\n\r\n}\n\n//# sourceURL=webpack://AwesomeTable/./src/table/CollectionTableController.js?");

/***/ }),

/***/ "./src/table/CollectionTableEvents.js":
/*!********************************************!*\
  !*** ./src/table/CollectionTableEvents.js ***!
  \********************************************/
/*! exports provided: CollectionTableEvents */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CollectionTableEvents\", function() { return CollectionTableEvents; });\n/* harmony import */ var _TableEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TableEvent */ \"./src/table/TableEvent.js\");\n/* harmony import */ var _TableEvents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TableEvents */ \"./src/table/TableEvents.js\");\n\r\n\r\n\r\n\r\nclass CollectionTableEvents extends _TableEvents__WEBPACK_IMPORTED_MODULE_1__[\"TableEvents\"] {\r\n\r\n    constructor(controller) {\r\n        super(controller);\r\n\r\n        let view = controller.view;\r\n        let model = controller.model;\r\n        this.controller = controller;\r\n        this.view = view;\r\n        this.model = model;\r\n        controller.loadPageEvent = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](controller);\r\n        view.deleteColumnClicked = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        view.addRowClicked = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        view.deleteRowClicked = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        view.moveRowUpClicked = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        view.moveRowDownClicked = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        view.copyRowClicked = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        view.deleteAllClicked = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        view.makeTableWriteable = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        view.makeTableReadable = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        view.inputChanged = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        view.individualSelectChanged = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        view.dataTableChanged = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n\r\n\r\n        //##################   EDIT\r\n        view.onEditClick = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        controller.view.onEditClick.attach(\r\n            function() {\r\n            if (typeof model.td.onEditClick === 'function') {\r\n                model.td.onEditClick();\r\n            }\r\n            else {\r\n                controller.makeEditable()\r\n            }\r\n\r\n        }\r\n        );\r\n\r\n        //##################   CANCEL\r\n        view.onCancelClick = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        controller.view.onCancelClick.attach(\r\n            function () {\r\n\r\n                controller.model.loadBackupData();\r\n                controller.makeReadable();\r\n                view.hideRowModifyButtons();\r\n\r\n            }\r\n        );\r\n\r\n\r\n        //##################   SAVE SUCCESS\r\n        controller.onSaveSuccess = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](controller);\r\n        controller.onSaveSuccess.attach(\r\n            function (sender, result) {\r\n                controller.model.td.access = 'read';\r\n                view.drawTable();\r\n                controller.model.original_data = controller.getPostData();\r\n                //     if (controller.model.td.edit_display == 'on_page') {\r\n                //         controller.model.td.access = 'read';\r\n                //         view.drawTable();\r\n                //         controller.model.original_data = controller.getPostData();\r\n                //     }\r\n                //     else if (controller.model.td.edit_display == 'modal') {\r\n                //         if(typeof controller.model.td.onSaveSuccess === 'function'){\r\n                //             controller.model.td.onSaveSuccess(result.id);\r\n                //\r\n                //         }\r\n                //\r\n                //     }\r\n                //     else if (controller.model.td.edit_display == 'modal_only') {\r\n                //\r\n                //         console.log(result);\r\n                //         console.log(JSON.stringify(controller.getPostData()))\r\n                //         console.log(controller.model.td.table_view);\r\n                //         console.log(controller.model.td.edit_display);\r\n                //         console.log(JSON.stringify(controller.model.tdo))\r\n                //         console.log(result.id)\r\n                //\r\n                //         controller.model.td.onSaveSuccess(result.id);\r\n                //     }\r\n            }\r\n        )\r\n\r\n\r\n        let self = controller;\r\n        view.onRowClick = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        view.onRowClick.attach(\r\n            function (sender, args) {\r\n                controller.selectRow(args.sectionRowIndex)\r\n            }\r\n        );\r\n        view.onHeaderArrayClick = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        view.onHeaderArrayClick.attach(\r\n            function (sender, args) {\r\n\r\n                let header_row =args.e.target.parentNode.sectionRowIndex;\r\n                let db_field = args.col_def.db_field\r\n\r\n                controller.selectHeaderRow(db_field, header_row)\r\n\r\n                if (typeof controller.model.td.onHeaderArrayClick === 'function') {\r\n                    controller.model.td.onHeaderArrayClick(args);\r\n                }\r\n            }\r\n        );\r\n        view.onHeaderClick = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n\r\n        view.onHeaderClick.attach(\r\n            function (sender, args) {\r\n                console.log('collection table controller on sort');\r\n                controller.sort.onSort(args);\r\n                if (typeof controller.model.td.onHeaderClick === 'function') {\r\n                    controller.model.td.onHeaderClick(args);\r\n                }\r\n            }\r\n        )\r\n\r\n\r\n        view.selectAllClicked = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        controller.view.selectAllClicked.attach(\r\n            function () {\r\n                controller.selectAll();\r\n            }\r\n        )\r\n\r\n        view.selectNoneClicked = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        controller.view.selectNoneClicked.attach(\r\n            function () {\r\n                controller.selectNone();\r\n            }\r\n        )\r\n\r\n\r\n        view.addColumnClicked = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        controller.view.addColumnClicked.attach(\r\n            function () {\r\n                controller.model.addColumnToArray(controller.view.array_col);\r\n                controller.view.drawTable();\r\n            }\r\n        )\r\n        controller.view.deleteColumnClicked.attach(\r\n            function () {\r\n                controller.model.deleteColumnFromArray(controller.view.array_col);\r\n                controller.view.drawTable();\r\n            }\r\n        )\r\n        controller.view.addRowClicked.attach(\r\n            function () {\r\n                let row = controller.addNewRow();\r\n                return row;\r\n            }\r\n        );\r\n        controller.view.deleteRowClicked.attach(\r\n            function () {\r\n                    if (confirm(\"Confirm Delete Row(s)\")) {\r\n                        self.deleteRow(confirm)\r\n                    }\r\n            }\r\n        );\r\n        controller.view.moveRowUpClicked.attach(\r\n            function () {\r\n                self.moveRowUp()\r\n            }\r\n        );\r\n        controller.view.moveRowDownClicked.attach(\r\n            function () {\r\n                self.moveRowDown()\r\n            }\r\n        );\r\n        controller.view.copyRowClicked.attach(\r\n            function () {\r\n                self.copyRow()\r\n            }\r\n        );\r\n        controller.view.deleteAllClicked.attach(\r\n            function (args) {\r\n                if (confirm(\"Confirm Delete All Rows\")) {\r\n                    self.deleteAllRows(args)\r\n                }\r\n            }\r\n        );\r\n        controller.view.inputChanged.attach(\r\n            function (sender, args) {\r\n\r\n                console.log('inputChanged Event...  copyTable then updateTotals ... then the cd event');\r\n                //I added in an r and c on the element, but for some reason it is always set to the r c of the last element in the table\r\n                // console.log(args.c);\r\n                // console.log(args);\r\n\r\n\r\n                let element = args.element;\r\n\r\n\r\n                //what is the elments row and column?\r\n                let cell = element.parentNode;\r\n                let c = cell.cellIndex;\r\n\r\n                let row = cell.parentNode;\r\n                let r = row.sectionRowIndex;\r\n\r\n                //col def is here.....\r\n                // console.log(controller.view.tbody_cells[r][c])\r\n\r\n\r\n                self.copyTable()\r\n                //not a great place for this...the update should be called elsewhere....\r\n                // self.view.updateTableValues()\r\n\r\n\r\n                controller.active_row = r;\r\n\r\n\r\n                if (typeof controller.model.td.onChange === 'function') {\r\n                    //this callback has router\r\n                    controller.model.td.onChange(args, r, c);\r\n                }\r\n            }\r\n        );\r\n        controller.view.individualSelectChanged.attach(\r\n            function () {\r\n                //console.log('individual select changed');\r\n                self.copyTable();\r\n                self.view.updateIndividualSelectOptions();\r\n                self.view.inputChanged.notify();\r\n            }\r\n        );\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\n\n//# sourceURL=webpack://AwesomeTable/./src/table/CollectionTableEvents.js?");

/***/ }),

/***/ "./src/table/CollectionTableView.js":
/*!******************************************!*\
  !*** ./src/table/CollectionTableView.js ***!
  \******************************************/
/*! exports provided: CollectionTableView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CollectionTableView\", function() { return CollectionTableView; });\n/* harmony import */ var _TableView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TableView */ \"./src/table/TableView.js\");\n/* harmony import */ var _lib_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/math */ \"./src/lib/math.js\");\n/**\r\n * Created by embrasse-moi on 1/18/17.\r\n */\r\n\r\n\r\n\r\nclass CollectionTableView extends _TableView__WEBPACK_IMPORTED_MODULE_0__[\"TableView\"] {\r\n    constructor(model) {\r\n\r\n        super(model);\r\n\r\n        //use these to set and track sorting\r\n        this.header_elements_array = []; //array of th's\r\n        this.header_elements = {}; //th's by name\r\n        this.footer_elements = {};\r\n        this.total_row_elements = {}\r\n\r\n\r\n    }\r\n\r\n    createCollectionTable() {\r\n        let name = this.model.td.name;\r\n\r\n        //first create all the dom parents so we have easy access later\r\n        this.collectionTableDiv = this.createCollectionTableDiv();\r\n        this.table = this.createTable(name);\r\n        this.collectionTableDiv.appendChild(this.table);\r\n        this.table_modify_div = this.createTableModifyDiv()\r\n        this.collectionTableDiv.appendChild(this.table_modify_div);\r\n        this.edit_button_div = this.createEditButtonDiv();\r\n        this.collectionTableDiv.appendChild(this.edit_button_div);\r\n\r\n        //now draw the table....\r\n        this.drawTable();\r\n        return this.collectionTableDiv;\r\n    }\r\n\r\n    createCollectionTableDiv() {\r\n        let div = document.createElement('div');\r\n        let self = this;\r\n        div.addEventListener('keyup', function (event) {\r\n            if (event.which == 13) {\r\n                console.log('enter pressed');\r\n            }\r\n        });\r\n        return div;\r\n    }\r\n\r\n    createTable(name) {\r\n        let tbl = document.createElement('table');\r\n        tbl.id = name + '_table';\r\n        tbl.classList.add('awesome-collection-table')\r\n\r\n        tbl.classList.add('table')\r\n        //bootstrap\r\n        // tbl.classList.add('table-bordered')\r\n        // tbl.classList.add('table-striped')\r\n\r\n        //bulma\r\n        // tbl.classList.add('is-bordered')\r\n        // tbl.classList.add('is-striped')\r\n\r\n        tbl.appendChild(this.createThead(name));\r\n        tbl.appendChild(this.createTotalsBody(name));\r\n        this.createTBody(name);\r\n        tbl.appendChild(this.tbody);\r\n        tbl.appendChild(this.createTFoot(name));\r\n        return tbl;\r\n    }\r\n\r\n    createThead(name) {\r\n        let thead = document.createElement('thead');\r\n        thead.id = name + '_thead';\r\n        this.thead = thead;\r\n        return thead;\r\n    }\r\n\r\n    isTableReadAndColumnRowCheckbox(col_def) {\r\n        if (!(!this.checkWrite() && col_def.type == 'row_checkbox')) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    showOnList(col_def) {\r\n        if (typeof col_def['show_on_list'] === 'undefined' || col_def['show_on_list']) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    drawThead() {\r\n        //a better way to do this is just create the thead... then assign it...\r\n        let self = this;\r\n\r\n        this.checkTHeaderArray();\r\n        this.thead.innerHTML = '';\r\n        this.header_elements_array = [];\r\n        let tr = [];\r\n        for (let i = 0; i < this.header_row_span; i++) {\r\n            tr[i] = this.thead.insertRow();\r\n        }\r\n        let caption = ''\r\n        this.model.cdo.forEach(col_def => {\r\n\r\n            if (this.showOnList(col_def)) {\r\n                if (this.isTableReadAndColumnRowCheckbox(col_def)) {\r\n                    caption = ''\r\n                    if (typeof col_def['caption'] !== 'undefined') {\r\n                        caption = col_def['caption'];\r\n                    }\r\n                    if (typeof col_def.caption !== 'undefined' && Array.isArray(col_def.caption)) {\r\n                        //this.CreateTheadArray(col_def,);\r\n                        let header_array = [];\r\n\r\n\r\n                        col_def.caption.forEach((caption_row, row) => {\r\n                            header_array[row] = []\r\n                            caption_row.forEach((caption_entry, col) => {\r\n\r\n                                let th = document.createElement('th');\r\n                                th.innerHTML = caption_entry;\r\n                                header_array[row][col] = th;\r\n\r\n                                //if the user clicks the header array we may want a callback....\r\n\r\n                                th.addEventListener(\"click\", function (e) {\r\n                                    self.onHeaderArrayClick.notify({e, col_def})\r\n                                });\r\n\r\n                                this.th_width(col_def, th);\r\n\r\n                                tr[row].appendChild(th);\r\n\r\n\r\n                            })\r\n                        });\r\n                        this.header_elements_array.push(header_array);\r\n\r\n                        this.header_elements[col_def.db_field] = header_array;\r\n                    }\r\n                    else {\r\n                        let th = document.createElement('th');\r\n                        th.col_def = col_def;\r\n                        th.id = col_def.db_field + '_header';\r\n                        th.sort = 0;\r\n                        th.addEventListener(\"click\", function (e) {\r\n                            self.onHeaderClick.notify([e, th])\r\n                        });\r\n                        let p = document.createElement('p');\r\n                        p.innerHTML = caption;\r\n                        th.appendChild(p);\r\n\r\n                        let i1 = document.createElement('i');\r\n                        i1.className = 'fa fa-sort';\r\n                        th.appendChild(i1);\r\n\r\n                        this.th_width(col_def, th);\r\n\r\n                        th.rowSpan = this.header_row_span;\r\n                        tr[0].appendChild(th);\r\n                        //keep track of the elements in order and by name\r\n                        this.header_elements_array.push(th);\r\n                        this.header_elements[col_def.db_field] = th;\r\n\r\n\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n        })\r\n        this.updateHeaderSortView()\r\n\r\n    }\r\n\r\n    th_width(col_def, th) {\r\n        if (col_def.db_field == 'row_number') {\r\n            th.style.width = '30px';\r\n        }\r\n        if (col_def.db_field == 'row_checkbox') {\r\n            th.style.width = '30px';\r\n        }\r\n        if (typeof col_def['width'] != 'undefined') {\r\n            th.style.width = col_def['width'];\r\n        }\r\n    }\r\n\r\n    getHeaderCaption(db_field) {\r\n        let col_def = this.model.getColDef(db_field);\r\n        let caption = db_field;\r\n        if (typeof col_def.caption !== 'undefined') {\r\n            caption = col_def.caption;\r\n        }\r\n        return caption;\r\n    }\r\n\r\n    updateHeaderSortView() {\r\n\r\n        for (var db_field in this.header_elements) {\r\n            let th = this.header_elements[db_field];\r\n            if (!Array.isArray(th)) {\r\n                th.innerHTML = this.getHeaderCaption(db_field)\r\n                th.classList.remove(\"thHighlight\")\r\n                //th.childNodes[1].className = 'no_sort';\r\n                th.sort = 0;\r\n            }\r\n        }\r\n        //first reset everything.....\r\n\r\n        //\r\n\r\n        //read the sort array and set the visuals\r\n        let self = this;\r\n\r\n        //first remove all formatting....\r\n        // this.header_elements_array.forEach(th => {\r\n        //     if (!Array.isArray(th)) {\r\n        //         th.classList.remove(\"thHighlight\")\r\n        //         th.childNodes[1].className = 'no_sort';\r\n        //         th.sort = 0;\r\n        //     }\r\n        // })\r\n        //now based on the sort set the format\r\n        this.model.sort.forEach(sort_value => {\r\n            //should be db_field : asc or desc\r\n            let keys = Object.keys(sort_value);\r\n            let db_field = keys[0];\r\n\r\n\r\n            let th = self.header_elements[db_field];\r\n\r\n            switch (sort_value[db_field]) {\r\n                case 'asc':\r\n                    th.innerHTML = this.getHeaderCaption(db_field) + ' &and;'\r\n                    th.className = 'thHighlight';\r\n                    // th.childNodes[1].className = 'sort_up';\r\n                    th.sort = 1;\r\n                    break;\r\n                case 'desc':\r\n                    th.innerHTML = this.getHeaderCaption(db_field) + ' &or;'\r\n\r\n                    th.className = 'thHighlight';\r\n                    // th.childNodes[1].className = 'sort_down';\r\n                    th.sort = 2;\r\n                    break;\r\n            }\r\n        })\r\n    }\r\n\r\n    checkTHeaderArray() {\r\n        //an array can be n rows by n columns... we need to figure that out\r\n        this.header_row_span = 1;\r\n        this.model.cdo.forEach((col_def, col) => {\r\n            if (col_def['show_on_list'] !== false) {\r\n                if (typeof col_def.caption !== 'undefined' && col_def.caption.constructor === Array) {\r\n                    this.header_row_span = col_def.caption.length;\r\n                    this.array_col = col;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    createTotalsBody(name) {\r\n        this.total_tbody = document.createElement('tbody');\r\n        this.total_tbody.id = name + '_data_totals_tbody';\r\n        this.total_tbody.classList.add('awesome-collection-table-totals')\r\n\r\n        // this.updateTotals();\r\n        return this.total_tbody;\r\n\r\n    }\r\n\r\n    drawTotalsRow() {\r\n        this.total_tbody.innerHTML = '';\r\n        let totals_row = false;\r\n        this.model.cdo.forEach(col_def => {\r\n            if (typeof col_def['total'] != 'undefined') {\r\n                totals_row = true;\r\n            }\r\n        })\r\n        //console.log('totals row' + totals_row)\r\n        if (totals_row) {\r\n            let tr = this.total_tbody.insertRow();\r\n            tr.className = 'generalTableTotalsRow';\r\n            tr.style.backgroundColor = 'yellow';\r\n            let total_place = false;\r\n            let col_counter = 0;\r\n            this.model.cdo.forEach(col_def => {\r\n                if (this.checkRead() && this.isRowCheckbox(col_def)) {\r\n                    //read does not have a row check box so skip creating a celll....nothing is rendered here.... it is just easier to do this positive check\r\n                }\r\n                else {\r\n                    if (this.isTotalCol(col_def)) {\r\n                        let cell = tr.insertCell(col_counter);\r\n                        cell.id = this.model.td.name + \"_totalrow_\" + col_def.db_field;\r\n                        col_counter++;\r\n                        this.total_row_elements[col_def.db_field] = cell;\r\n                    }\r\n                    else {\r\n                        if (typeof col_def.caption !== 'undefined' && col_def.caption.constructor === Array) {\r\n\r\n                            col_def.caption[0].forEach((caption_row, col) => {\r\n                                let cell = tr.insertCell(col_counter);\r\n                                cell.id = this.model.td.name + \"_totalrow_\" + col_def.db_field + col;\r\n                                col_counter++;\r\n\r\n                            });\r\n                        }\r\n                        else {\r\n                            let cell = tr.insertCell(col_counter);\r\n                            // cell.id = \"tsrr0\" + \"c\" + col_counter;\r\n                            cell.id = this.model.td.name + \"_totalrow_\" + col_def.db_field;\r\n\r\n                            col_counter++;\r\n\r\n                            if (!total_place) {\r\n                                cell.innerHTML = 'TOTALS';\r\n                                total_place = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    isRowCheckbox(col_def) {\r\n        if (col_def.type == 'row_checkbox') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isTableReadAndColRowCheckbox(col_def) {\r\n\r\n\r\n    }\r\n\r\n    isTotalCol(col_def) {\r\n        if (col_def['show_on_list'] !== false) {\r\n            if (typeof col_def['total'] !== 'undefined') {\r\n                return true;\r\n            }\r\n            //read row checkbox does not render\r\n\r\n        }\r\n        return false;\r\n    }\r\n\r\n    updateTotalsRow() {\r\n        //update the value of the totals of the total row\r\n        let total;\r\n        this.model.cdo.forEach(col_def => {\r\n            if (this.isTotalCol(col_def)) {\r\n                total = this.model.sumColumn(col_def.db_field);\r\n                this.total_row_elements[col_def.db_field].innerHTML = Object(_lib_math__WEBPACK_IMPORTED_MODULE_1__[\"round2\"])(total, col_def['total']);\r\n            }\r\n        });\r\n    }\r\n\r\n    createTBody(name) {\r\n        this.tbody = document.createElement('tbody');\r\n        this.tbody.id = name + '_data_tbody';\r\n        this.tbody.classList.add('awesome-collection-table-tbody')\r\n\r\n        return this.tbody;\r\n    }\r\n\r\n    drawTbody() {\r\n        this.tbody.innerHTML = '';\r\n        this.rows = [];\r\n        this.cells_by_name = [];\r\n        this.elements_array = [];\r\n        this.tbody_cells = [];\r\n        // let self = this;\r\n        // this.model.tdo.forEach((data_row, r) => {\r\n        // })\r\n        for (let r = 0; r < this.model.tdo.length; r++) {\r\n            this.drawTbodyRow(r);\r\n        }\r\n        if (this.checkWrite()) {\r\n            this.updateIndividualSelectOptions();\r\n        }\r\n    }\r\n\r\n    drawTbodyRow(r) {\r\n        this.cells_by_name[r] = {};\r\n        this.elements_array[r] = [];\r\n        this.tbody_cells[r] = [];\r\n\r\n        let tr = this.tbody.insertRow();\r\n        tr.id = this.model.td.name + '_r' + r;\r\n        let self = this;\r\n        tr.addEventListener(\"click\", function () {\r\n            self.onRowClick.notify(tr);\r\n        });\r\n        this.rows[r] = tr;\r\n\r\n        let col_counter = 0;\r\n        this.model.cdo.forEach((col_def) => {\r\n            if (col_def['show_on_list'] !== false) {\r\n                if (this.checkRead() && this.isRowCheckbox(col_def)) {\r\n                    //skip this column if the table is read only and the row is a checkbox\r\n                }\r\n                else {\r\n                    col_counter = this.createColumn(tr, r, col_def, col_counter);\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    createColumn(tr, r, col_def, col_counter) {\r\n        let cell;\r\n\r\n        // let data = data_row[col_def.db_field].data; //data can be an array.....\r\n        if (this.isColArray(col_def)) {\r\n            this.cells_by_name[r][col_def.db_field] = [];\r\n            col_def.caption[0].forEach((caption_row, col) => {\r\n                cell = this.createCell(tr, col_def, r, col_counter, col);\r\n                cell.id = this.model.td.name + '_r' + r + '_' + col_def.db_field + col_counter;\r\n                this.updateCellArray(r, col_counter, cell, col_def, col);\r\n                col_counter++;\r\n            });\r\n        }\r\n        else {\r\n            cell = this.createCell(tr, col_def, r, col_counter);\r\n            cell.id = this.model.td.name + '_r' + r + '_' + col_def.db_field;\r\n            this.updateCellArray(r, col_counter, cell, col_def);\r\n            col_counter++;\r\n        }\r\n\r\n        return col_counter;\r\n    }\r\n\r\n    createCell(tr, col_def, r, col_counter, col = 'undefined') {\r\n        let self = this;\r\n        let element = this.createElement(null, col_def, r, col_counter);\r\n        element.addEventListener(\"focus\", function () {\r\n            self.activeRow = tr.sectionRowIndex\r\n        });\r\n\r\n        if (col !== 'undefined') {\r\n            element.id = this.model.td.name + '_td_r' + r + '_' + col_def.db_field + col;\r\n\r\n        }\r\n        else {\r\n            element.id = this.model.td.name + '_td_r' + r + '_' + col_def.db_field;\r\n        }\r\n        let cell = tr.insertCell(-1);\r\n        cell.appendChild(element);\r\n        return cell;\r\n    }\r\n\r\n    updateCellArray(r, c, cell, col_def, col = false) {\r\n        if (col !== false) {\r\n            this.cells_by_name[r][col_def.db_field][col] = cell;\r\n        }\r\n        else {\r\n            this.cells_by_name[r][col_def.db_field] = cell;\r\n        }\r\n        //I am using this one to find elements --- probably just broke it......\r\n        this.elements_array[r][c] = cell;\r\n        //this one will tie the col_def to the element, making working with the model easier\r\n        this.tbody_cells[r][c] = {};\r\n        this.tbody_cells[r][c].col_def = col_def;\r\n        this.tbody_cells[r][c].td = cell;\r\n    }\r\n\r\n\r\n    createTFoot(name) {\r\n\r\n        let tfoot = document.createElement('tfoot');\r\n        this.tfoot = tfoot;\r\n        return tfoot;\r\n    }\r\n\r\n    drawFooter() {\r\n        this.tfoot.innerHTML = '';\r\n\r\n        //how many rows:\r\n        let rows = 0;\r\n        this.model.cdo.forEach(col_def => {\r\n            if (col_def['show_on_list'] !== false) {\r\n                if (typeof col_def.footer !== 'undefined') {\r\n                    this.footer_elements[col_def.db_field] = [];\r\n                    if (col_def.footer.length > rows) {\r\n                        rows = col_def.footer.length;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        if (rows == 0) return;\r\n\r\n        let tr;\r\n        let col_span;\r\n\r\n\r\n        for (let row = 0; row < rows; row++) {\r\n            tr = document.createElement('tr');\r\n            let col_counter = 0;\r\n            let element;\r\n            this.model.cdo.forEach(col_def => {\r\n                //keep track of the span of the td....\r\n                //well if it is read we need to skip row checkbox\r\n\r\n                if (this.showOnList(col_def)) {\r\n                    if (this.isTableReadAndColumnRowCheckbox(col_def)) {\r\n                        element = document.createElement('td')\r\n                        if (typeof col_def.footer !== 'undefined' && typeof col_def.footer[row] !== 'undefined') {\r\n                            //draw an extended cell for anything before the footer... add the caption there.....\r\n                            if (col_counter > 0) {\r\n\r\n                                element = document.createElement('td')\r\n                                tr.appendChild(element);\r\n                                element.classList.add('at-footer-label')\r\n                                element.colSpan = col_counter;\r\n                                element.innerHTML = col_def.footer[row].caption;\r\n                                col_counter = 0;\r\n\r\n                            }\r\n                            element = document.createElement('td')\r\n                            element.classList.add('at-footer-data')\r\n                            element.id = this.model.td.name + '_footer_' + col_def.db_field + row\r\n\r\n                            tr.appendChild(element);\r\n                            this.footer_elements[col_def.db_field][row] = element;\r\n\r\n                        }\r\n                        else {\r\n                            //the column did not have a footer column....\r\n                            if (Array.isArray(col_def.caption)) {\r\n                                col_counter = col_counter + col_def.caption[0].length;\r\n                            }\r\n                            else {\r\n                                col_counter++;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n            })\r\n            this.tfoot.appendChild(tr);\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    updateFooter() {\r\n\r\n\r\n        this.model.cdo.forEach(col_def => {\r\n            if (typeof col_def.footer !== 'undefined') {\r\n                for (let i = 0; i < col_def.footer.length; i++) {\r\n                    if (typeof col_def.footer[i].round !== 'undefined') {\r\n                        this.footer_elements[col_def.db_field][i].innerHTML = Object(_lib_math__WEBPACK_IMPORTED_MODULE_1__[\"round2\"])(col_def.footer[i].getValue(), col_def.footer[i].round);\r\n\r\n                    }\r\n                    else {\r\n                        this.footer_elements[col_def.db_field][i].innerHTML = col_def.footer[i].getValue();\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        // this.tfoot.appendChild(tr);\r\n        //\r\n        // this.footer_elements.forEach((footer_col, col) =>{\r\n        //     for(let i = 0; i<footer[])\r\n        // })\r\n        // this.model.td.footer.forEach((footer_col, col) => {\r\n        //     console.log('footer col')\r\n        //     console.log(footer_col)\r\n        //     console.log(col)\r\n        //     // footer_col['total'][0] //subtotal?\r\n        //     // this.model.td.footer['total'][1] //tax?\r\n        //\r\n        // });\r\n    }\r\n\r\n    checkRows(array) {\r\n        //console.log('checking...');\r\n        for (let i = 0, row; row = this.tbody.rows[i]; i++) {\r\n            if (array.indexOf(i) > -1) {\r\n                let col = row.cells[0];\r\n                if (typeof col.childNodes[0] !== 'undefined') {\r\n                    if (col.childNodes[0].type == 'checkbox') {\r\n                        col.childNodes[0].checked = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    updateIndividualSelectOptions() {\r\n\r\n        this.model.tdo.forEach((data_row, r) => {\r\n            this.model.cdo.forEach((col_def) => {\r\n                if (col_def['type'] == 'select') {\r\n                    if (typeof col_def['individual_select_options'] !== 'undefined') {\r\n                        let element = this.elements[r][col_def.db_field];\r\n                        let selected_values = this.model.getDbFieldArray(col_def.db_field);\r\n                        // console.log('#####################################################');\r\n                        // console.log('row' + r);\r\n                        // console.log('selected_values');\r\n                        // console.log(selected_values);\r\n\r\n                        element.innerHTML = '';\r\n\r\n                        let option = document.createElement('option');\r\n                        option.value = 'NULL';\r\n                        option.appendChild(document.createTextNode(\"Select...\"));\r\n                        element.appendChild(option);\r\n\r\n                        let select_values = col_def.select_values;\r\n                        // let select_names = col_def.select_names;\r\n\r\n                        //selected values are [3,4,9]\r\n                        //array is [1,2,3,4,5,6,7,8,9]\r\n                        //want to return  row 1: [1,2,3,5,6,7,8]\r\n                        // row 2: [1,2,4,5,6,7,8]\r\n                        //row 3 [1,2,5,6,7,8,9]\r\n\r\n                        //remove the current row\r\n                        let selected_values_less_current_row = selected_values.slice();\r\n\r\n\r\n                        selected_values_less_current_row.splice(r, 1);\r\n                        // console.log('selected_values_less_current_row');\r\n                        // console.log(selected_values_less_current_row);\r\n                        //remove the values from selected\r\n                        let individual_select_names = [];\r\n                        let individual_select_values = [];\r\n                        select_values.forEach((select_value, i) => {\r\n                            if (selected_values_less_current_row.indexOf(select_value.value + '') < 0) {\r\n                                individual_select_names.push(select_value.name);\r\n                                individual_select_values.push(select_value.value);\r\n                            }\r\n                        });\r\n                        // console.log('individual_select_names');\r\n                        // console.log(individual_select_names);\r\n                        //\r\n                        // console.log('individual_select_values');\r\n                        // console.log(individual_select_values);\r\n\r\n                        individual_select_values.forEach((value, i) => {\r\n                            option = document.createElement('option');\r\n                            option.value = individual_select_values[i] + '';\r\n                            option.appendChild(document.createTextNode(individual_select_names[i]));\r\n                            element.appendChild(option);\r\n\r\n                        });\r\n                        //this.addProperties(col_def, element);\r\n                        //console.log(data_row[col_def.db_field].data);\r\n                        element.value = data_row[col_def.db_field].data + '';\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    drawTable() {\r\n        this.drawThead();\r\n        this.drawTotalsRow();\r\n        this.drawTbody();\r\n        this.drawFooter();\r\n        this.drawTableEditSaveButtons();\r\n\r\n        this.updateTableValues();\r\n\r\n    }\r\n\r\n    highlightRow(row) {\r\n        for (let i = 0; i < this.rows.length; i++) {\r\n            if (i == row) {\r\n                this.rows[i].classList.add('row_selected')\r\n            }\r\n            else {\r\n\r\n                this.rows[i].classList.remove('row_selected')\r\n            }\r\n        }\r\n    }\r\n\r\n    highlightHeaderRow(col_name, selected_row) {\r\n        let header_elements = this.header_elements;\r\n        for (let i = 0; i < header_elements[col_name].length; i++) {\r\n            for (let j = 0; j < header_elements[col_name][i].length; j++) {\r\n                if (i == selected_row) {\r\n                    header_elements[col_name][i][j].classList.add(\"header_selected\");\r\n                }\r\n                else {\r\n                    header_elements[col_name][i][j].classList.remove(\"header_selected\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    createTableModifyDiv() {\r\n        let div = document.createElement('div');\r\n        div.id = this.model.td.name + '_buttons';\r\n        div.className = 'awesome-collection-table_buttons';\r\n        return div;\r\n    }\r\n\r\n    createTableModifyButtons() {\r\n\r\n\r\n        let table_modify_div = document.createElement('div');\r\n        table_modify_div.className = 'awesome-collection-table_modify_buttons';\r\n\r\n        let self = this;\r\n        let element;\r\n\r\n        let buttons = this.model.td.table_buttons;\r\n        if (buttons.includes('selectRows')) {\r\n            element = document.createElement('button');\r\n            element.innerHTML = 'Select All';\r\n            element.id = name + 'select_all';\r\n            element.classList.add(\"button\");\r\n\r\n            element.addEventListener('click', function () {\r\n                self.selectAllClicked.notify();\r\n            });\r\n            table_modify_div.appendChild(element);\r\n            element = document.createElement('button');\r\n            element.innerHTML = 'Select None';\r\n            element.id = name + 'select_none';\r\n            element.classList.add(\"button\");\r\n\r\n            element.addEventListener('click', function () {\r\n                self.selectNoneClicked.notify();\r\n            });\r\n            table_modify_div.appendChild(element);\r\n\r\n\r\n        }\r\n        if (buttons.includes('addRow')) {\r\n            element = document.createElement('button');\r\n            element.innerHTML = 'Add Row';\r\n            element.id = name + '_add_row';\r\n            element.classList.add(\"button\");\r\n            element.addEventListener('click', function () {\r\n                self.addRowClicked.notify();\r\n            });\r\n            table_modify_div.appendChild(element);\r\n        }\r\n        if (buttons.includes('copyRows')) {\r\n            element = document.createElement('button');\r\n            element.innerHTML = 'Copy Row(s)';\r\n            element.id = name + 'copy_row';\r\n            element.classList.add(\"button\");\r\n\r\n            element.addEventListener('click', function () {\r\n                self.copyRowClicked.notify();\r\n            });\r\n            table_modify_div.appendChild(element);\r\n        }\r\n        if (buttons.includes('moveRows')) {\r\n            element = document.createElement('button');\r\n            element.innerHTML = 'Move Row(s) Up';\r\n            element.id = name + 'move_row_up';\r\n            element.classList.add(\"button\");\r\n\r\n            element.addEventListener('click', function () {\r\n                self.moveRowUpClicked.notify();\r\n            });\r\n            table_modify_div.appendChild(element);\r\n\r\n            element = document.createElement('button');\r\n            element.innerHTML = 'Move Row(s) Down';\r\n            element.id = name + 'move_row_down';\r\n            element.classList.add(\"button\");\r\n\r\n            element.addEventListener('click', function () {\r\n                self.moveRowDownClicked.notify();\r\n            });\r\n            table_modify_div.appendChild(element);\r\n        }\r\n        if (buttons.includes('deleteRow')) {\r\n            element = document.createElement('button');\r\n            element.innerHTML = 'Delete Row(s)';\r\n            element.id = name + '_delete_row';\r\n            element.classList.add(\"button\");\r\n\r\n            element.addEventListener('click', function () {\r\n                self.deleteRowClicked.notify();\r\n            });\r\n            table_modify_div.appendChild(element);\r\n        }\r\n        if (buttons.includes('deleteAllRows')) {\r\n            element = document.createElement('button');\r\n            element.innerHTML = 'Delete All Rows';\r\n            element.id = name + 'delete_all_rows';\r\n            element.classList.add(\"button\");\r\n\r\n            element.addEventListener('click', function () {\r\n                self.deleteAllClicked.notify();\r\n            });\r\n            table_modify_div.appendChild(element);\r\n        }\r\n        if (buttons.includes('addColumn')) {\r\n            element = document.createElement('button');\r\n            element.innerHTML = 'Add Column';\r\n            element.id = name + 'add_column';\r\n            element.classList.add(\"button\");\r\n\r\n            element.addEventListener('click', function () {\r\n                self.addColumnClicked.notify();\r\n            });\r\n            table_modify_div.appendChild(element);\r\n\r\n        }\r\n        if (buttons.includes('deleteColumn')) {\r\n            element = document.createElement('button');\r\n            element.innerHTML = 'Delete Column';\r\n            element.id = name + 'delete_column';\r\n            element.classList.add(\"button\");\r\n\r\n            element.addEventListener('click', function () {\r\n                self.deleteColumnClicked.notify();\r\n            });\r\n            table_modify_div.appendChild(element);\r\n\r\n        }\r\n\r\n\r\n        return table_modify_div;\r\n\r\n    }\r\n\r\n    showRowModifyButtons() {\r\n        //this needs to be show/hidden.......\r\n        this.table_modify_div.appendChild(this.createTableModifyButtons());\r\n        // this.table_modify_div.style.visibility = \"visible\"\r\n    }\r\n\r\n    hideRowModifyButtons() {\r\n        this.table_modify_div.innerHTML = '';\r\n        // this.table_modify_div.style.visibility = \"hidden\"\r\n\r\n\r\n    }\r\n\r\n    createEditButtonDiv() {\r\n        let edit_button_div = document.createElement('div');\r\n        edit_button_div.className = 'awesome-collection-table_edit_buttons';\r\n        return edit_button_div;\r\n    }\r\n\r\n    updateTableValues() {\r\n\r\n        //we can loop through the child nodes or through tbody_cells....\r\n\r\n        for (let i = 0; i < this.tbody.childNodes.length; i++) {\r\n            // for (let i = 0; i < this.tbody_cells.length; i++) {\r\n            this.updateRowValues(i)\r\n        }\r\n        this.updateTotals();\r\n    }\r\n\r\n\r\n    updateRowValues(r) {\r\n\r\n\r\n        //method 2: go through the physical table and update..... weird passing col_def around....\r\n        // let cells = this.tbody.childNodes[r].childNodes;\r\n        // for (let c = 0; c<cells.length; c++) {\r\n        //     let col_and_data = this.getRCValue(r, c);\r\n        //     this.writeElementValue(col_and_data.col_def, cells[c], col_and_data.data)\r\n        // }\r\n\r\n\r\n        let row = this.tbody_cells[r];\r\n\r\n        for (let c = 0; c < row.length; c++) {\r\n            let col_def = row[c].col_def;\r\n            let data = this.model.tdo[r][col_def.db_field].data\r\n\r\n            if (Array.isArray(data)) {\r\n                for (let i = 0; i < data.length; i++) {\r\n                    this.writeCellValue(col_def, row[c].td, data[i])\r\n                    c++;\r\n                }\r\n                c--;\r\n            }\r\n            else {\r\n                this.writeCellValue(col_def, row[c].td, data)\r\n            }\r\n\r\n        }\r\n\r\n\r\n        //running out of steam.... basically loosing the element..... so I can't write to it....\r\n        // is this even the best way?\r\n\r\n        //loop through the elements\r\n        //get the data...\r\n        // update\r\n\r\n        // console.log()\r\n        //\r\n        //\r\n        // console.log(typeof this.elements[r])\r\n        // console.log(this.elements[r])\r\n        // console.log(this.elements[r])\r\n        //\r\n        //\r\n        // // this.elements[r].forEach((element, key)=>{\r\n        // //     console.log(element);\r\n        // //     console.log(key)\r\n        // // })\r\n        // let self = this;\r\n        // Object.keys(self.elements[r]).forEach(function (key) {\r\n        //\r\n        //     console.log(key)\r\n        //     console.log(self.elements[r])\r\n        //     console.log(self.elements[r][key])\r\n        //\r\n        //\r\n        // });\r\n        //\r\n        // for (let db_field in this.elements[r]) {\r\n        //     //might need a hasOwnProperty thingy......\r\n        //     if (this.elements[r].hasOwnProperty(db_field)) {\r\n        //         let col_def = this.model.getColDef(db_field);\r\n        //         //might be an array.....\r\n        //         if (this.isColArray(col_def)) {\r\n        //             for (let i = 0; i < col_def.caption.length; i++) {\r\n        //                 let data = this.model.getData(db_field, r, i);\r\n        //                 this.writeElementValue(this.elements[r][db_field][i], col_def, data)\r\n        //             }\r\n        //         }\r\n        //         else {\r\n        //             console.log(this.elements)\r\n        //             let data = this.model.getData(db_field, r);\r\n        //             this.writeElementValue(this.elements[r][db_field], col_def, data)\r\n        //         }\r\n        //     }\r\n        // }\r\n        //this is on only for a collection table\r\n\r\n    }\r\n\r\n    updateTotals() {\r\n        this.updateTotalsRow()\r\n        this.updateFooter()\r\n    }\r\n\r\n    isColArray(col_def) {\r\n        if (typeof col_def.caption !== 'undefined' && Array.isArray(col_def.caption)) {\r\n            return true;\r\n        }\r\n        return false\r\n    }\r\n\r\n\r\n//code stink\r\n    getRCValue(r, c) {\r\n        //this is a code stink... so I do not plan on using it...\r\n        //given the row and column of an element or cell\r\n\r\n        let col_counter = 0;\r\n        let found = false;\r\n        let return_data = false;\r\n\r\n        this.model.cdo.forEach(col_def => {\r\n            if (col_def.show_on_list !== false) {\r\n                if (this.isRowCheckbox(col_def) && this.checkRead()) {\r\n                    //nothing here\r\n                }\r\n                else {\r\n\r\n                    if (this.isColArray(col_def)) {\r\n                        for (let i = 0; i < col_def.caption[0].length; i++) {\r\n                            if (col_counter == c && !found) {\r\n                                found = true\r\n                                return_data = {\r\n                                    data: this.model.tdo[r][col_def.db_field].data[i],\r\n                                    col_def\r\n                                }\r\n                            }\r\n                            else {\r\n                                col_counter++;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n\r\n                        if (col_counter == c && !found) {\r\n                            found = true\r\n\r\n                            return_data = {\r\n                                data: this.model.tdo[r][col_def.db_field].data,\r\n                                col_def\r\n                            }\r\n                        }\r\n                        else {\r\n                            col_counter++;\r\n                        }\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n\r\n        })\r\n\r\n        return return_data;\r\n    }\r\n\r\n}\n\n//# sourceURL=webpack://AwesomeTable/./src/table/CollectionTableView.js?");

/***/ }),

/***/ "./src/table/ColumnDefinition.js":
/*!***************************************!*\
  !*** ./src/table/ColumnDefinition.js ***!
  \***************************************/
/*! exports provided: ColumnDefinition */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ColumnDefinition\", function() { return ColumnDefinition; });\nclass ColumnDefinition {\r\n    //the column definition defines the data, the view and controller functions\r\n    constructor(awesomeTable) {\r\n        this.awesomeTable=awesomeTable;\r\n    }\r\n    //where do I put some specs on time?\r\n    //time: pass in a date, time, datetime in many formats...\r\n    //date: pass in a  date, time, datetime in many formats....\r\n    cd() {\r\n        let cd = {\r\n            \"db_field\": 'replace',\r\n            \"caption\": \"replace\", //this can also be a 2-d array to match data that is in an array\r\n            \"type\": \"id html date time password text number textarea row_checkbox row_number checkbox select tree_select button link radio\",\r\n            'min': 1,   //add a minimum value\r\n            'max': '2018-01-12', //add a maximum value for the browser to handle\r\n            'readonly': true,\r\n            'select_values': this.select_values(), //or this.tree_select_values();\r\n            'individual_select_options':true, //in a collection table this will limit the choices\r\n            button_caption: 'only for a button',\r\n            'default_value': 'default value is set',\r\n            \"show_on_list\": true,  //true or ommitted, false\r\n            \"show_on_view\": true, //true or ommitted, false\r\n            \"show_on_create\": true, //true or ommitted, false\r\n            \"show_on_edit\": true, //true or ommitted, false\r\n            \"th_width\": 10,\r\n            \"search\": \"LIKE ANY BETWEEN EXACT\",\r\n            search_default : \"\",\r\n            \"total\": 0,\r\n            \"round\": 0,\r\n            \"events\": [],\r\n            \"properties\": [],\r\n            'word_wrap': true,\r\n            'post': true\r\n        };\r\n        return cd;\r\n    }\r\n    allOptions() {\r\n\r\n        var cd = [];\r\n        cd.push(this.row_checkbox());\r\n        cd.push(this.row_number());\r\n        cd.push(this.select());\r\n        cd.push(this.tree_select());\r\n        cd.push(this.individual_select());\r\n        cd.push(this.button());\r\n        cd.push(this.link());\r\n        cd.push(this.checkbox());\r\n        cd.push(this.radio());\r\n        cd.push(this.input());\r\n        cd.push(this.date());\r\n        cd.push(this.time());\r\n        cd.push(this.datetime());\r\n        cd = cd.concat(this.password());\r\n        cd.push(this.textarea());\r\n        cd = cd.concat(this.numbers());\r\n\r\n        return cd;\r\n    }\r\n\r\n    purchaseOrder(updateQuantity, updateTotal) {\r\n        var cd = [];\r\n        cd.push(this.row_checkbox());\r\n        cd.push(this.row_number());\r\n        cd.push(this.style());\r\n        cd = cd.concat(this.sizes(updateQuantity));\r\n        cd.push(this.cost(updateTotal));\r\n        cd.push(this.total());\r\n        return cd;\r\n\r\n    }\r\n\r\n    //select formats\r\n    select_values(){\r\n        return [\r\n            {\r\n                'value': 1,\r\n                'name': 'liliana'\r\n            },\r\n            {\r\n                'value': 2,\r\n                'name': 'two'\r\n            }, {\r\n                'value': 3,\r\n                'name': 'three'\r\n            }, {\r\n                'value': 4,\r\n                'name': 'four'\r\n            }, {\r\n                'value': 5,\r\n                'name': 'five'\r\n            }, {\r\n                'value': 6,\r\n                'name': 'six'\r\n            }, {\r\n                'value': 7,\r\n                'name': 'seven'\r\n            }, {\r\n                'value': 8,\r\n                'name': 'eight'\r\n            }, {\r\n                'value': 9,\r\n                'name': 'nine'\r\n            },\r\n        ]\r\n\r\n    }\r\n\r\n\r\n\r\n    style() {\r\n        return {\r\n            \"db_field\": \"style\",\r\n            \"type\": \"text\",\r\n            'default_value': 'default value',\r\n            \"caption\": \"Style\",\r\n            \"width\": \"100px\"\r\n        }\r\n    }\r\n\r\n    cost(updateTotal) {\r\n        let self = this;\r\n\r\n        let updateRow = function (event, custom_parameters) {\r\n            let r = self.awesomeTable.getRow(event.srcElement);\r\n            console.log(custom_parameters);\r\n            updateTotal(r);\r\n        }\r\n        return {\r\n            \"db_field\": \"cost\",\r\n            \"type\": \"number\",\r\n            \"caption\": \"Cost\",\r\n            \"width\": '100px',\r\n            \"events\": {\r\n                \"change\": updateRow,\r\n                \"keyup\": updateRow,\r\n                \"click\": updateRow,\r\n            }\r\n        }\r\n    }\r\n\r\n    total() {\r\n        let self = this;\r\n        let getTotal = function(){\r\n            let total_sum = self.awesomeTable.model.sumColumn('total');\r\n            return total_sum\r\n        }\r\n        let getTax = function(){\r\n            return 0.08 * getTotal();\r\n        }\r\n\r\n\r\n        return {\r\n            \"db_field\": \"total\",\r\n            \"type\": \"text\",\r\n            \"properties\": [{\"readOnly\": true}],\r\n            \"caption\": \"Total\",\r\n            \"width\": '100px',\r\n            \"footer\": [\r\n                {\r\n                    caption: 'Subtotal',\r\n                    round:2,\r\n                    getValue: function () {\r\n                        return getTotal();\r\n                    }\r\n                },\r\n                {\r\n                    caption: 'Tax',\r\n                    round:2,\r\n                    getValue: function () {\r\n                        return getTax()\r\n                    }\r\n                },\r\n                {\r\n                    caption: 'Total',\r\n                    round:2,\r\n                    getValue: function () {\r\n                        return  getTotal() + getTax();\r\n                    }\r\n                },\r\n\r\n            ],\r\n            \"total\": 2,\r\n            \"round\": 2,\r\n        }\r\n    }\r\n\r\n    sizes(updateQuantity) {\r\n\r\n        let updateRow = function (event,custom_parameters) {\r\n            //we want to update values only if we are changing something that adjusts totals,\r\n            //otherwise I would need to call calculate blindly on all input...\r\n            updateQuantity(custom_parameters.r)\r\n        }\r\n        let self = this;\r\n\r\n        return [{\r\n            db_field: \"sizes\",\r\n            caption: [[\"XS\", \"S\", \"M\", \"L\", \"\"], [\"40\", \"42\", \"44\", \"46\", \"\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]],\r\n            min: 0,\r\n            //'max':5,\r\n            type: \"number\",\r\n            \"default_value\": '',\r\n            \"show_on_list\": true,\r\n            \"show_on_view\": true,\r\n            \"show_on_edit\": true,\r\n            \"show_on_create\": true,\r\n            width: '50px',\r\n            \"class\": \"\",\r\n            \"events\": {\r\n                \"keyup\": updateRow,\r\n                \"click\": updateRow,\r\n                \"change\": updateRow,\r\n            },\r\n            \"properties\": [],\r\n            \"word_wrap\": true\r\n        },\r\n            {\r\n                \"db_field\": \"qty\",\r\n                \"caption\": \"Quantity\",\r\n                \"type\": \"text\",\r\n                \"default_value\": '',\r\n                footer:[\r\n                    {   caption: 'Total Quantity',\r\n                        round:0,\r\n                        getValue: function(){\r\n                        return self .awesomeTable.model.sumColumn('qty')\r\n                    }}\r\n                ],\r\n                \"width\": '100px',\r\n                \"td_tags\": \"\",\r\n                \"class\": \"\",\r\n                \"events\": [],\r\n                \"search\": \"LIKE ANY BETWEEN EXACT\",\r\n                \"properties\": [{\"readOnly\": true}],\r\n                \"total\": 0,\r\n                \"round\": 0,\r\n                \"word_wrap\": true\r\n            },];\r\n    }\r\n\r\n    //move these to a data faker class.....\r\n    select_values() {\r\n        let s = [\r\n            {\r\n                'value': 1,\r\n                'name': 'liliana'\r\n            },\r\n            {\r\n                'value': 2,\r\n                'name': 'two'\r\n            }, {\r\n                'value': 3,\r\n                'name': 'three'\r\n            }, {\r\n                'value': 4,\r\n                'name': 'four'\r\n            }, {\r\n                'value': 5,\r\n                'name': 'five'\r\n            }, {\r\n                'value': 6,\r\n                'name': 'six'\r\n            }, {\r\n                'value': 7,\r\n                'name': 'seven'\r\n            }, {\r\n                'value': 8,\r\n                'name': 'eight'\r\n            }, {\r\n                'value': 9,\r\n                'name': 'nine'\r\n            },\r\n        ]\r\n        return s;\r\n    }\r\n\r\n    tree_select_values() {\r\n        let s = [\r\n            {\r\n                \"name\": \"one\",\r\n                \"value\": \"1\",\r\n                \"children\": [\r\n                    {\"name\": \"one_child_one\", \"value\": \"1_1\"},\r\n                    {\"name\": \"one_child_two\", \"value\": \"1_2\"},\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"two\",\r\n                \"value\": \"2\",\r\n                \"children\": [\r\n                    {\r\n                        \"name\": \"two_child_one\", \"value\": \"2_1\", \"children\": [\r\n                        {\"name\": \"two_child_one_child_one\", \"value\": \"2_1_1\"},\r\n                        {\"name\": \"two_child_two_child_two\", \"value\": \"2_1_2\"},\r\n                    ]\r\n                    },\r\n                    {\"name\": \"two_child_two\", \"value\": \"2_2\"}\r\n                ]\r\n            }\r\n\r\n        ]\r\n\r\n        return s;\r\n    }\r\n\r\n    button() {\r\n        return {\r\n            \"db_field\": \"button\",\r\n            \"type\": \"button\",\r\n            \"button_caption\": \"button\",\r\n            \"th_width\": 100,\r\n            \"caption\": \"Button\",\r\n\r\n        };\r\n    }\r\n\r\n    link() {\r\n        return {\r\n            \"db_field\": \"link\",\r\n            \"type\": \"link\",\r\n            \"caption\": \"Link\",\r\n            \"default_value\": 'link',\r\n            \"editable\": false,\r\n            \"search\": true,\r\n            \"search_default\": \"\",\r\n\r\n\r\n        };\r\n    }\r\n\r\n    checkbox() {\r\n        return {\r\n            \"db_field\": \"checkbox\",\r\n            \"type\": \"checkbox\",\r\n            \"caption\": \"Checkbox\",\r\n            \"default_value\": 1,\r\n            \"search\": true,\r\n            \"search_default\": \"\",\r\n\r\n        };\r\n    }\r\n\r\n    radio() {\r\n        return {\r\n            \"db_field\": \"radio\",\r\n            \"type\": \"radio\",\r\n            \"caption\": \"Radio\",\r\n        };\r\n    }\r\n\r\n    input() {\r\n        return {\r\n            \"db_field\": \"input\",\r\n            \"type\": \"text\",\r\n            \"caption\": \"Text Input\",\r\n            \"placeholder\": \"\",\r\n            \"search\": true,\r\n            \"search_default\": \"\",\r\n        };\r\n    }\r\n\r\n    date() {\r\n        return {\r\n            \"db_field\": \"date\",\r\n            \"type\": \"date\",\r\n            \"caption\": \"Date\",\r\n            \"placeholder\": \"YYYY-MM-DD\",\r\n            \"search\": true,\r\n            \"search_default\": \"\",\r\n\r\n        };\r\n    }\r\n\r\n    time() {\r\n        return {\r\n            \"db_field\": \"time\",\r\n            \"type\": \"text\",\r\n            \"caption\": \"Time\",\r\n            \"placeholder\": \"HH:MM:SS 24 hour or 12 hour with PM\",\r\n            \"search\": true,\r\n            \"search_default\": \"\",\r\n        };\r\n    }\r\n\r\n    datetime() {\r\n        return {\r\n            \"db_field\": \"date_time\",\r\n            \"type\": \"text\",\r\n            \"caption\": \"Date Time\",\r\n            \"placeholder\": \"YYYY-MM-DD HH:MM\",\r\n            \"search\": true,\r\n            \"search_default\": \"\",\r\n        };\r\n    }\r\n\r\n    password() {\r\n        return [{\r\n            \"db_field\": \"password\",\r\n            \"type\": \"password\",\r\n            \"caption\": \"Password\",\r\n            \"show_on_edit\": false,\r\n            \"show_on_list\": false,\r\n            \"show_on_view\": false,\r\n            \"show_on_create\": true,\r\n\r\n\r\n        }, {\r\n            \"db_field\": \"password_confirmation\",\r\n            \"type\": \"password\",\r\n            \"caption\": \"Password Confirmation\",\r\n            \"show_on_edit\": false,\r\n            \"show_on_list\": false,\r\n            \"show_on_view\": false,\r\n            \"show_on_create\": true,\r\n\r\n        }\r\n        ]\r\n\r\n    }\r\n\r\n    textarea() {\r\n        return {\r\n            \"db_field\": \"textarea\",\r\n            \"type\": \"textarea\",\r\n            \"caption\": \"Textarea\",\r\n            \"search\": true,\r\n            \"search_default\": \"\",\r\n\r\n        };\r\n    }\r\n\r\n    numbers() {\r\n        return [{\r\n            \"db_field\": \"number\",\r\n            \"type\": \"number\",\r\n            \"caption\": \"Number\",\r\n            \"search\": true,\r\n            \"search_default\": \"\",\r\n        },\r\n            {\r\n                \"db_field\": \"number_round_2\",\r\n                \"type\": \"number\",\r\n                \"caption\": \"Number Rounded 2 Places\",\r\n                \"default_value\": 10,\r\n                \"round\": 2,\r\n                \"total\": 2,\r\n                \"search\": true,\r\n                \"search_default\": \"\",\r\n\r\n            },\r\n            {\r\n                \"db_field\": \"number_round_0\",\r\n                \"type\": \"number\",\r\n                \"caption\": \"Number Rounded 0 Places\",\r\n                \"default_value\": 20,\r\n                \"round\": 0,\r\n                \"total\": 0,\r\n                \"search\": true,\r\n                \"search_default\": \"\",\r\n\r\n            }]\r\n    }\r\n\r\n    row_number() {\r\n        return {\r\n            \"type\": \"row_number\",\r\n            \"db_field\": \"row_number\",\r\n            \"caption\": \"Row\",\r\n            width: \"100px\"\r\n        };\r\n    }\r\n\r\n    row_checkbox() {\r\n\r\n        return {\r\n            type: \"row_checkbox\",\r\n            db_field: \"row_checkbox\",\r\n            width: \"100px\"\r\n\r\n        }\r\n\r\n    }\r\n\r\n    select() {\r\n\r\n        return {\r\n            \"db_field\": \"select\",\r\n            \"type\": \"select\",\r\n            \"select_values\": this.select_values(),\r\n            \"caption\": \"select\",\r\n            \"default_value\": false,\r\n            \"search\": true,\r\n            \"search_default\": \"\",\r\n\r\n        };\r\n\r\n    }\r\n\r\n    tree_select() {\r\n        let obj = {\r\n            \"db_field\": \"tree_select\",\r\n            \"type\": \"tree_select\",\r\n            \"select_values\": this.tree_select_values(),\r\n            \"caption\": \"Tree Select\",\r\n            \"default_value\": 1,\r\n            \"search\": true,\r\n            \"search_default\": \"\",\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    individual_select() {\r\n        let obj = {\r\n            \"db_field\": \"individual_select\",\r\n            \"type\": \"select\",\r\n            \"select_values\": this.select_values(),\r\n            \"individual_select_options\": true,\r\n            \"caption\": \"Individual Select\",\r\n            \"search\": true,\r\n            \"search_default\": \"\",\r\n\r\n        };\r\n        return obj;\r\n    }\r\n\r\n}\r\n\r\n\n\n//# sourceURL=webpack://AwesomeTable/./src/table/ColumnDefinition.js?");

/***/ }),

/***/ "./src/table/RecordTableController.js":
/*!********************************************!*\
  !*** ./src/table/RecordTableController.js ***!
  \********************************************/
/*! exports provided: RecordTableController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RecordTableController\", function() { return RecordTableController; });\n/* harmony import */ var _TableController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TableController */ \"./src/table/TableController.js\");\n/* harmony import */ var _TableEvent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TableEvent */ \"./src/table/TableEvent.js\");\n/* harmony import */ var _RecordTableEvents__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RecordTableEvents */ \"./src/table/RecordTableEvents.js\");\n/**\r\n * Created by embrasse-moi on 1/19/17.\r\n */\r\n\r\n\r\n\r\n\r\nclass RecordTableController extends _TableController__WEBPACK_IMPORTED_MODULE_0__[\"TableController\"] {\r\n    constructor(model, view) {\r\n        super(model)\r\n        this.view = view;\r\n\r\n        this.events = new _RecordTableEvents__WEBPACK_IMPORTED_MODULE_2__[\"RecordTableEvents\"](this);\r\n\r\n\r\n\r\n    }\r\n\r\n    onCancelCreate(){\r\n        if (typeof this.model.td.onCancelCreateClick === 'function') {\r\n            return this.model.td.onCancelCreateClick()\r\n        }\r\n    }\r\n    onCancelEdit(){\r\n        //kinda want a confirm here....\r\n        this.model.loadBackupData();\r\n        this.model.td.table_view = 'show';\r\n        this.model.td.access = 'read';\r\n        this.view.drawTable();\r\n    }\r\n\r\n    getSelectValueName(column_name, value){\r\n        value = parseInt(value);\r\n        let return_value = false;\r\n        let col = this.model.getCDOColumnNumberFromName(column_name);\r\n\r\n        let col_def = this.model.cdo[col];\r\n        let select_values = col_def.select_values;\r\n        select_values.forEach(select_value =>{\r\n\r\n            if (parseInt(select_value.value) == value)\r\n            {\r\n                return_value = select_value.name;\r\n            }\r\n        })\r\n        return return_value;\r\n    }\r\n    loadRecord(data){\r\n        this.model.loadData([data]);\r\n        this.view.updateTableValues();\r\n    }\r\n    copyTable() {\r\n        //for the record table igonore row_number and row_checkbox columns\r\n\r\n        this.model.cdo.forEach((col_def) => {\r\n            if(col_def.type != 'row_checkbox' && col_def.type != 'row_number'){\r\n\r\n                let element = this.view.elements[0][col_def.db_field];\r\n                switch (this.model.td.table_view) {\r\n                    case 'create':\r\n                        if (col_def['show_on_create'] !== false){\r\n                            this.copyElementValueToModel(element, col_def, 0);\r\n                        }\r\n                        break;\r\n                    case 'edit':\r\n                        if (col_def['show_on_edit'] !== false){\r\n                            this.copyElementValueToModel(element, col_def, 0);\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n\r\n    getConfirm(confirmMessage, callback) {\r\n        confirmMessage = confirmMessage || '';\r\n        self = this;\r\n        this.view.showConfirmModal(true);\r\n\r\n        $('#confirmMessage').html(confirmMessage);\r\n        $('#confirmFalse').click(function () {\r\n            $(self.view.confirmModal).modal('hide');\r\n            if (callback) callback(false);\r\n\r\n        });\r\n        $('#confirmTrue').click(function () {\r\n            $(self.view.confirmModal).modal('hide');\r\n            if (callback) callback(true);\r\n        });\r\n    }\r\n\r\n\r\n\r\n    checkWrite()\r\n    {\r\n        let write = false;\r\n        if(this.model.td.access.toUpperCase() == \"WRITE\") write = true;\r\n        return write;\r\n    }\r\n    checkRead()\r\n    {\r\n        return ! this.checkWrite();\r\n    }\r\n\r\n\r\n\r\n}\n\n//# sourceURL=webpack://AwesomeTable/./src/table/RecordTableController.js?");

/***/ }),

/***/ "./src/table/RecordTableEvents.js":
/*!****************************************!*\
  !*** ./src/table/RecordTableEvents.js ***!
  \****************************************/
/*! exports provided: RecordTableEvents */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RecordTableEvents\", function() { return RecordTableEvents; });\n/* harmony import */ var _TableEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TableEvent */ \"./src/table/TableEvent.js\");\n/* harmony import */ var _TableEvents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TableEvents */ \"./src/table/TableEvents.js\");\n\r\n\r\n\r\n\r\nclass RecordTableEvents extends _TableEvents__WEBPACK_IMPORTED_MODULE_1__[\"TableEvents\"] {\r\n\r\n    constructor(controller) {\r\n        super(controller);\r\n        let view = controller.view;\r\n\r\n        //##################    LOAD PAGE\r\n        controller.loadPageEvent = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](controller);\r\n        controller.loadPageEvent.attach(\r\n            function () {\r\n                console.log('load page event...')\r\n            }\r\n        );\r\n\r\n\r\n        view.individualSelectChanged = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        controller.view.individualSelectChanged.attach(\r\n            function () {\r\n                //console.log('individual select changed');\r\n                controller.copyTable();\r\n                //controller.view.updateIndividualSelectOptions();\r\n            }\r\n        );\r\n\r\n        //##################   INPUT CHANGED\r\n        view.inputChanged = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        controller.view.inputChanged.attach(\r\n            function (sender, args) {\r\n                console.log('input changed');\r\n                controller.copyTable();\r\n                if (typeof controller.model.td.onChange === 'function') {\r\n                    //this callback has router\r\n                    controller.model.td.onChange(args);\r\n                }\r\n            }\r\n        );\r\n\r\n\r\n\r\n        //##################   EDIT CLICKED\r\n        view.onEditClick = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        controller.view.onEditClick.attach(\r\n            function () {\r\n                if (typeof controller.model.td.onEditClick == 'function') {\r\n\r\n                    controller.model.td.onEditClick();\r\n                    console.log('using custom onEditClick')\r\n                    console.log(controller.model.td)\r\n\r\n                }\r\n                else {\r\n                    console.log('using reg onEditClick')\r\n\r\n                    controller.makeEditable();\r\n\r\n                }\r\n\r\n\r\n            }\r\n        );\r\n\r\n        //##################   CANCEL CLICKED\r\n        view.onCancelClick = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        view.onCancelClick.attach(\r\n            function () {\r\n                switch (controller.model.td.table_view) {\r\n                    case 'edit':\r\n                        controller.onCancelEdit();\r\n                        break;\r\n                    case 'create':\r\n                        controller.onCancelCreate();\r\n                }\r\n            }\r\n        );\r\n\r\n        //##################   SAVE SUCCESS\r\n        controller.onSaveSuccess = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](controller);\r\n        controller.onSaveSuccess.attach(\r\n            function (sender, result) {\r\n\r\n                console.log(controller.model.td.table_view);\r\n\r\n                switch (controller.model.td.table_view) {\r\n                    case 'create':\r\n                        if (typeof controller.model.td.onCreateSaved === \"function\") {\r\n                            controller.model.td.onCreateSaved(result.id);\r\n                        }\r\n                        else {\r\n                            alert('add onCreateSaved to table options');\r\n                        }\r\n                        //window.location.href = controller.model.td.route + '/' + result.id;\r\n                        break;\r\n                    case 'edit':\r\n                        controller.model.td.table_view = 'show';\r\n                        controller.model.td.access = 'read';\r\n                        //set the original data to the new data\r\n                        controller.model.original_data = controller.getPostData();\r\n                        view.drawTable();\r\n\r\n\r\n\r\n                        break;\r\n                }\r\n\r\n                controller.saveComplete.notify();\r\n                //switch the uri to the new id....\r\n\r\n            }\r\n        )\r\n\r\n        //##################   SAVE COMPLETE\r\n        controller.saveComplete = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](controller);\r\n\r\n        //##################   DELETE CLICKED\r\n        view.onDeleteClick = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        view.onDeleteClick.attach(function () {\r\n            if (typeof controller.model.td.onDeleteClick === 'function') {\r\n                controller.model.td.onDeleteClick();\r\n            }\r\n        });\r\n\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://AwesomeTable/./src/table/RecordTableEvents.js?");

/***/ }),

/***/ "./src/table/RecordTableView.js":
/*!**************************************!*\
  !*** ./src/table/RecordTableView.js ***!
  \**************************************/
/*! exports provided: RecordTableView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RecordTableView\", function() { return RecordTableView; });\n/* harmony import */ var _TableView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TableView */ \"./src/table/TableView.js\");\n/**\r\n * Created by embrasse-moi on 1/18/17.\r\n */\r\n\r\n\r\n\r\nclass RecordTableView extends _TableView__WEBPACK_IMPORTED_MODULE_0__[\"TableView\"] {\r\n    constructor(model) {\r\n        super(model);\r\n        this.elements_array = [];\r\n\r\n    }\r\n\r\n\r\n    createRecordTable() {\r\n        let name = this.model.td.name;\r\n        this.recordTableDiv = this.createRecordTableDiv();\r\n        this.table = this.createTableElement(name);\r\n        this.recordTableDiv.appendChild(this.table);\r\n        this.recordTableDiv.appendChild(this.createButtons());\r\n        this.drawTable();\r\n\r\n        return this.recordTableDiv;\r\n    }\r\n\r\n\r\n    createButtons() {\r\n\r\n        let div = document.createElement('div');\r\n        div.id = this.id + '_buttons';\r\n        div.className = 'record_table_buttons';\r\n        this.edit_button_div = div;\r\n        return div;\r\n\r\n    }\r\n\r\n\r\n    createRecordTableDiv() {\r\n        let div = document.createElement('div');\r\n        div.className = 'record_table_div';\r\n        div.id = this.name + '_table_div';\r\n\r\n        // div.addEventListener('keyup', function (event) {\r\n        //     if (event.which == 13) {\r\n        //         console.log('enter pressed')\r\n        //         //me.submitSearch();\r\n        //     }\r\n        // });\r\n        return div;\r\n    }\r\n\r\n    createTableElement(name) {\r\n\r\n        let tbl = document.createElement('table');\r\n        tbl.id = name + '_table';\r\n        tbl.classList.add('awesome-record-table')\r\n        tbl.classList.add('table')\r\n\r\n        return tbl;\r\n\r\n    }\r\n\r\n\r\n    drawTable() {\r\n        this.drawTbody();\r\n        this.drawTableEditSaveButtons();\r\n\r\n        this.updateTableValues();\r\n\r\n    }\r\n    drawTbody() {\r\n        let tbl = this.table;\r\n        tbl.innerHTML = '';\r\n        //this.elements = {};\r\n        //this.elements_array = [];\r\n\r\n        this.elements = [];\r\n        this.elements[0] = {};\r\n        this.elements_array = [];\r\n        this.tbody_cells = [];\r\n\r\n\r\n\r\n        let tbody = document.createElement('tbody');\r\n        tbl.appendChild(tbody);\r\n        this.tbody = tbody;\r\n        this.model.cdo.forEach((col_def) => {\r\n            switch (this.model.td.table_view) {\r\n                case 'create':\r\n                    if (typeof col_def['show_on_create'] === 'undefined' || col_def['show_on_create']) {\r\n                        this.addRow(tbody, col_def);\r\n                    }\r\n                    break;\r\n                case 'edit':\r\n                    if (typeof col_def['show_on_edit'] === 'undefined' || col_def['show_on_edit']) {\r\n                        this.addRow(tbody, col_def);\r\n                    }\r\n                    break;\r\n                case 'show':\r\n                    if (typeof col_def['show_on_view'] === 'undefined' || col_def['show_on_view']) {\r\n                        this.addRow(tbody, col_def);\r\n                    }\r\n                    break;\r\n                default:\r\n                    console.log('error in the column definition - table_view was not set....');\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n    updateTableValues() {\r\n\r\n    \r\n        this.updateRowValues(0)\r\n       \r\n    }\r\n    updateRowValues(row_number = 0){\r\n\r\n\r\n        let row = this.tbody_cells;\r\n        for (let c = 0; c < row.length; c++) {\r\n            let col_def = row[c].col_def;\r\n\r\n            let data = this.model.tdo[row_number][col_def.db_field].data\r\n            this.writeCellValue(col_def, row[c], data)\r\n        }\r\n    }\r\n   updateTotals(){\r\n        //dummy function do not delete.....\r\n   }\r\n\r\n\r\n\r\n    addRow(tbody, col_def) {\r\n        \r\n        if (col_def.type != 'row_checkbox' && col_def.type != 'row_number') {\r\n            let tr = tbody.insertRow();\r\n            let th = document.createElement('th');\r\n            let caption = col_def.db_field;\r\n            if (col_def.caption) {\r\n                caption = col_def.caption;\r\n            }\r\n            th.innerHTML = caption;\r\n            tr.appendChild(th);\r\n            let data = this.model.tdo[0][col_def.db_field].data;\r\n            let cell = tr.insertCell(-1);\r\n            cell.id = this.model.td.name + '_td_' + col_def.db_field;\r\n            this.tbody_cells.push(cell);\r\n            cell.col_def = col_def;\r\n            let element = this.createElement(data, col_def);\r\n            element.id=this.model.td.name + '_' + col_def.db_field;\r\n            element.awesomeTable = {};\r\n            element.awesomeTable.col_def = col_def;\r\n            this.elements[0][col_def.db_field] = element;\r\n            this.elements_array.push(element);\r\n            cell.appendChild(element);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // these funcions are here because the controller will call these for the collection table.... might eventually be useful here....\r\n    updateTotalsRow(){\r\n        //this is a blank function to make any update calls for totals...\r\n    }\r\n    updateFooter(){\r\n        //dummy function\r\n    }\r\n    showRowModifyButtons(){\r\n        //dummy function the controller will call this .... collection table functionality....\r\n    }\r\n\r\n    hideRowModifyButtons(){\r\n        //dummy function the controller will call this .... collection table functionality....\r\n    }\r\n\r\n\r\n}\n\n//# sourceURL=webpack://AwesomeTable/./src/table/RecordTableView.js?");

/***/ }),

/***/ "./src/table/SearchTableController.js":
/*!********************************************!*\
  !*** ./src/table/SearchTableController.js ***!
  \********************************************/
/*! exports provided: SearchTableController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SearchTableController\", function() { return SearchTableController; });\n/* harmony import */ var _CollectionTableController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CollectionTableController */ \"./src/table/CollectionTableController.js\");\n/* harmony import */ var _SearchTableEvents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SearchTableEvents */ \"./src/table/SearchTableEvents.js\");\n\r\n\r\n\r\n\r\nclass SearchTableController extends _CollectionTableController__WEBPACK_IMPORTED_MODULE_0__[\"CollectionTableController\"] {\r\n    constructor(model, view) {\r\n        super(model, view)\r\n        this.show_records_autmatically_below = 50;\r\n        this.searchTableEvents = new _SearchTableEvents__WEBPACK_IMPORTED_MODULE_1__[\"SearchTableEvents\"](this);\r\n    }\r\n    getSearchFormData(){\r\n        let url_data = {};\r\n        this.view.search_elements_array.forEach(element => {\r\n            url_data[element.name] = element.value;\r\n        })\r\n        url_data['table_name'] = this.model.td.name;\r\n        return url_data;\r\n    }\r\n    getSearchPostData(){\r\n        let post_data = {};\r\n        post_data['search_fields'] = {};\r\n        post_data['table_name'] = this.model.td.name;\r\n        this.view.search_elements_array.forEach(element => {\r\n            post_data.search_fields[element.name] = element.value;\r\n        })\r\n        console.log('I need controller for testing.... search post data');\r\n        console.log(JSON.stringify(post_data))\r\n        return post_data;\r\n    }\r\n    onSearchReturned(data){\r\n        // console.log(data)\r\n        let ret_data = data.data;\r\n        this.number_of_records_available = ret_data.length;\r\n        this.model.loadData(ret_data)\r\n        this.loadInitialData();\r\n    }\r\n    loadInitialData() {\r\n\r\n\r\n        //bad bad bad function, really confusing. abort..\r\n        if (this.number_of_records_available > 0 && this.model.tdo.length == 0) {\r\n            //if there are only a small amount of records go ahead and grab those....\r\n            if (this.number_of_records_available < this.show_records_autmatically_below) {\r\n                this.view.searchClicked.notify()\r\n            }\r\n            else {\r\n\r\n                this.view.addMessageInsteadOfTable(`There are ${this.number_of_records_available} records available... please search to see the data. To sort data returned click on the column header. You may also use shift+click for multiple column sorting.`)\r\n            }\r\n\r\n\r\n        }\r\n        else if (this.number_of_records_available == 0 && this.model.tdo.length == 0) {\r\n            this.view.addMessageInsteadOfTable(`There are 0 records available.`)\r\n        }\r\n        else {\r\n            //these should be all the records\r\n            this.view.addDataTable();\r\n            this.setFocusToFirstInputOfSearch()\r\n\r\n        }\r\n    }\r\n    populateSearchValuesFromDefaultValues() {\r\n        // console.log('populating search values');\r\n        this.model.cdo.forEach(col_def => {\r\n            if (typeof col_def['search'] != 'undefined' && typeof col_def['search_default'] != 'undefined') {\r\n                if (col_def['type'] == 'date'){\r\n                    col_def.search_element[0].value = col_def.search_default;\r\n                    col_def.search_element[1].value = col_def.search_default;\r\n                }\r\n                else\r\n                {\r\n                    col_def.search_element.value = col_def.search_default;\r\n                }\r\n            }\r\n        })\r\n    }\r\n    renderSearch(data){\r\n        this.model.loadData(data)\r\n        if(data.length>0){\r\n            this.view.addDataTable();\r\n\r\n            //what about sorting?\r\n\r\n\r\n\r\n            this.setFocusToFirstInputOfSearch()\r\n\r\n        }\r\n        else{\r\n            this.view.addMessageInsteadOfTable(`There are no search results`)\r\n            this.setFocusToFirstInputOfSearch()\r\n\r\n\r\n        }\r\n        if(typeof this.model.td.onLoadPageComplete === 'function'){\r\n            this.model.td.onLoadPageComplete();\r\n        }\r\n    }\r\n    onSearchClicked(){\r\n        this.storeSearch();\r\n        let search_fields = this.getSearchFormData()\r\n        let query = this.getQueryString();\r\n        if (typeof this.model.td.onSearchClick === 'function') {\r\n            this.model.td.onSearchClick(query);\r\n        }\r\n    }\r\n    getAndRenderSearch(){\r\n        let controller = this;\r\n        //call a user supplied function to grab the data\r\n        let data = controller.model.td.getData(controller.getSearchPostData());\r\n        if(data !== false){\r\n            controller.renderSearch(data)\r\n        }\r\n\r\n        // controller.model.td.getData({\r\n        //     method: 'post',\r\n        //     url: '/' + controller.model.td.search_route,\r\n        //     entity: controller.getSearchPostData(),\r\n        //     onSuccess: function (response) {\r\n        //         controller.renderSearch(response.data.records)\r\n        //     }\r\n        //\r\n        // })\r\n    }\r\n    onResetClicked() {\r\n        this.view.search_elements_array.forEach(element => {\r\n            switch (element.type) {\r\n                case 'tree_select':\r\n                case 'select-multiple':\r\n                case 'select-one':\r\n                    element.value = 'null'\r\n                    break\r\n                default:\r\n                    element.value = ''\r\n            }\r\n        })\r\n        this.setFocusToFirstInputOfSearch()\r\n        this.view.addMessageInsteadOfTable(`Press search to display results`)\r\n\r\n        this.clearStoredSearch();\r\n        this.sort.deleteStoredSort();\r\n        this.sort.resetStoredSort();\r\n\r\n        if(typeof this.model.td.onResetClick === 'function'){\r\n            this.model.td.onResetClick();\r\n        }\r\n\r\n    }\r\n    getSearchFormValues() {\r\n        let search_values = {};\r\n\r\n        this.view.search_elements_array.forEach(element => {\r\n            switch (element.type) {\r\n                case 'text':\r\n                case 'number':\r\n                case 'date':\r\n                    name = element.name\r\n                    search_values[name] = element.value;\r\n                    if (element.value != '') {\r\n                    }\r\n                    break;\r\n                case 'tree_select':\r\n                case 'select-multiple':\r\n                case 'select-one':\r\n                    name = element.name\r\n                    search_values[name] = element.value;\r\n                    if (element.value != 'null') {\r\n                    }\r\n                    break;\r\n                default:\r\n            }\r\n        })\r\n        return search_values;\r\n\r\n    }\r\n    setFocusToFirstInputOfSearch() {\r\n\r\n        if(this.view.search_elements_array[0].nodeName.toLowerCase() === 'input'){\r\n            this.view.search_elements_array[0].focus();\r\n            this.view.search_elements_array[0].select();\r\n        }\r\n        else if (this.view.search_elements_array[0].nodeName.toLowerCase() === 'select'){\r\n            console.log('select.......');\r\n            this.view.search_elements_array[0].focus();\r\n        }\r\n        else{\r\n            this.view.search_elements_array[0].focus();\r\n            this.view.search_elements_array[0].select();\r\n        }\r\n\r\n    }\r\n    getStoredSearchName(){\r\n        return this.model.td.name + '_search';\r\n    }\r\n    getQueryValues(){\r\n        //terrible name..... this returns an object of the paramaters that should be stored\r\n        let sort_data = this.sort.getSort();\r\n        let search_data = this.getSearchFormData();\r\n        return Object.assign(search_data , sort_data);\r\n    }\r\n    getQueryString(){\r\n        let params = this.getQueryValues();\r\n        var queryString = Object.keys(params).map(function(key) {\r\n            return key + '=' + params[key]\r\n        }).join('&');\r\n        return queryString;\r\n\r\n    }\r\n    checkQuery(search_query) {\r\n        //are there any key value pairs that match the search elements?\r\n        for (let i = 0; i < this.view.search_elements_array.length; i++) {\r\n            if (search_query[this.view.search_elements_array[i].name]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    loadFromUri(search_query){\r\n        console.log('loading from uri')\r\n        this.loadSearchValues(search_query)\r\n        //this.sort.loadSortFromUri(search_query);\r\n        this.storeSearch();\r\n\r\n    }\r\n    loadSearchValues(search_query) {\r\n        this.view.search_elements_array.forEach(element => {\r\n            if (search_query[element.name]) {\r\n                element.value = search_query[element.name]\r\n            }\r\n        })\r\n    }\r\n    checkSearchStorage() {\r\n        // return localStorage.getItem(this.getStoredSearchName());\r\n        if(localStorage[this.getStoredSearchName()]){\r\n            return localStorage[this.getStoredSearchName()];\r\n        }\r\n        else{\r\n            return false\r\n        }\r\n\r\n    }\r\n    clearStoredSearch(){\r\n        // localStorage.removeItem(this.getStoredSearchName());\r\n        delete localStorage[this.getStoredSearchName()];\r\n\r\n    }\r\n    retrieveSearch() {\r\n        // return JSON.parse(localStorage.getItem(this.getStoredSearchName()))\r\n        return JSON.parse(localStorage[this.getStoredSearchName()])\r\n\r\n    }\r\n    storeSearch() {\r\n        let search_values = this.getSearchFormValues();\r\n        // window.localStorage[this.getStoredSearchName()] = JSON.stringify(search_values);\r\n        // localStorage.setItem(this.getStoredSearchName(),JSON.stringify(search_values))\r\n        localStorage[this.getStoredSearchName()] =JSON.stringify(search_values)\r\n\r\n    }\r\n    loadSearchFromStorage() {\r\n        console.log('loading search values from storage')\r\n        let stored_values = this.retrieveSearch();\r\n        this.view.search_elements_array.forEach(element => {\r\n            if (stored_values[element.name]) {\r\n                element.value = stored_values[element.name]\r\n            }\r\n        })\r\n        return stored_values;\r\n\r\n\r\n    }\r\n}\n\n//# sourceURL=webpack://AwesomeTable/./src/table/SearchTableController.js?");

/***/ }),

/***/ "./src/table/SearchTableEvents.js":
/*!****************************************!*\
  !*** ./src/table/SearchTableEvents.js ***!
  \****************************************/
/*! exports provided: SearchTableEvents */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SearchTableEvents\", function() { return SearchTableEvents; });\n/* harmony import */ var _TableEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TableEvent */ \"./src/table/TableEvent.js\");\n\r\n\r\nclass SearchTableEvents {\r\n    constructor(controller) {\r\n\r\n        controller.searchReturned = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](controller)\r\n        controller.searching = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](controller)\r\n        controller.view.searchClicked = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](controller.view);\r\n        controller.view.resetClicked = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](controller.view);\r\n\r\n\r\n        controller.view.searchClicked.attach(\r\n            function () {\r\n                controller.onSearchClicked()\r\n            }\r\n        )\r\n        controller.searching.attach(\r\n            function () {\r\n                //controller.view.searching();\r\n            }\r\n        )\r\n        controller.searchReturned.attach(\r\n            function (sender, results) {\r\n                controller.onSearchReturned(results);\r\n            }\r\n        )\r\n        controller.loadPageEvent = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](controller)\r\n\r\n        // controller.loadPageEvent.attach(\r\n        //     function () {\r\n        //\r\n        //\r\n        //\r\n        //         //this is all shot......\r\n        //\r\n        //\r\n        //\r\n        //\r\n        //\r\n        //         //USER CAME IN FROM A LINK\r\n        //             //POPULATE SEARCH BOXES\r\n        //             //GO GET IT STORE THE SEARCH\r\n        //\r\n        //         //USER CAME IN FROM INTERNAL ROUTE\r\n        //             //CHECK IF THERE IS A STORED SEARCH IF SO POPULATE STORAGE THEN GO GET IT\r\n        //             //OTHERWISE POPULATE DEFAULT VALUES AND GO GET IT\r\n        //\r\n        //         //USER CLICKS SEARCH\r\n        //             //GO GET IT STORE THE SEARCH\r\n        //\r\n        //\r\n        //         //this gets set in the page wrapper.....the page gets the query for us....\r\n        //         let search_query = controller.model.td.search_query;\r\n        //\r\n        //         if (controller.uri.checkUri(search_query)) {\r\n        //\r\n        //\r\n        //             console.log('there is data on the uri')\r\n        //             if (typeof controller.model.td.onLoadPageStart === 'function') {\r\n        //                 controller.model.td.onLoadPageStart();\r\n        //             }\r\n        //\r\n        //             //this loads data to the search table fields\r\n        //\r\n        //             //and the sort arraycontroller.model.td.search_query;\r\n        //             controller.uri.loadFromUri(search_query);\r\n        //\r\n        //             if(typeof controller.model.td.onSearching=== 'function'){\r\n        //                 controller.model.td.onSearching();\r\n        //             }\r\n        //             controller.getAndRenderSearch();\r\n        //\r\n        //\r\n        //\r\n        //\r\n        //\r\n        //\r\n        //             // if(typeof controller.model.td.onLoadPage === 'function'){\r\n        //             //     controller.model.td.onLoadPage()\r\n        //             // }\r\n        //         }\r\n        //         else if (controller.uri.checkStorage()) {\r\n        //\r\n        //             //Here we need to replace the route, then react to the route change....\r\n        //             // which should then call the function above....\r\n        //             console.log('loading search from storage');\r\n        //             let search_fields = controller.uri.loadSearchFromStorage();\r\n        //             controller.uri.loadSortFromStorage();\r\n        //             if (typeof controller.model.td.loadPageFromStorage === 'function') {\r\n        //                 controller.model.td.loadPageFromStorage(search_fields);\r\n        //             }\r\n        //\r\n        //\r\n        //         }\r\n        //         else {\r\n        //             //no search set, we should NOW hit the server for Data\r\n        //             console.log('no search set, populate defaults then get records')\r\n        //             controller.populateSearchValuesFromDefaultValues();\r\n        //             if(controller.model.td.number_of_records_available <= controller.model.td.number_of_records_to_automatically_get)\r\n        //             {\r\n        //                 controller.getAndRenderSearch();\r\n        //             }\r\n        //             else{\r\n        //                 let message = \"There are \" + controller.model.td.number_of_records_available + \" records available, please search to limit the results.\";\r\n        //                 controller.view.addMessageInsteadOfTable(message)\r\n        //                 controller.setFocusToFirstInputOfSearch()\r\n        //\r\n        //\r\n        //                 // focus\r\n        //\r\n        //             }\r\n        //\r\n        //\r\n        //\r\n        //\r\n        //\r\n        //\r\n        //\r\n        //\r\n        //\r\n        //\r\n        //\r\n        //\r\n        //         }\r\n        //     }\r\n        // )\r\n        controller.view.resetClicked.attach(\r\n            function () {\r\n                controller.onResetClicked()\r\n            }\r\n        )\r\n    }\r\n}\n\n//# sourceURL=webpack://AwesomeTable/./src/table/SearchTableEvents.js?");

/***/ }),

/***/ "./src/table/SearchTableView.js":
/*!**************************************!*\
  !*** ./src/table/SearchTableView.js ***!
  \**************************************/
/*! exports provided: SearchTableView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SearchTableView\", function() { return SearchTableView; });\n/* harmony import */ var _CollectionTableView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CollectionTableView */ \"./src/table/CollectionTableView.js\");\n\r\n\r\nclass SearchTableView extends _CollectionTableView__WEBPACK_IMPORTED_MODULE_0__[\"CollectionTableView\"] {\r\n    constructor(model){\r\n        super(model);\r\n\r\n    }\r\n    createSearchTable() {\r\n        let name = this.model.td.name;\r\n        this.searchDiv = this.createSearchDiv();\r\n        this.searchTableElement = this.createSearchTableElement(name);\r\n        this.searchDiv.appendChild(this.searchTableElement);\r\n        this.searchThead = this.createSearchThead(name);\r\n        this.searchTableElement.appendChild(this.searchThead);\r\n        this.searchTbody = this.createSearchTbody(name);\r\n        this.searchTableElement.appendChild(this.searchTbody);\r\n        this.updateSearchTable();\r\n        this.searchDiv.appendChild(this.createSearchButtons())\r\n        this.searchDataTableDiv = this.createDataTableDiv();\r\n        this.searchDiv.appendChild(this.searchDataTableDiv);\r\n\r\n\r\n\r\n        return this.searchDiv;\r\n    }\r\ncreateSearchButtons(){\r\n    let self = this;\r\n    this.searchButtonDiv = document.createElement('div');\r\n    this.searchButtonDiv.className = \"search_buttons\";\r\n    this.searchButton = document.createElement('button');\r\n    this.searchButton.className = 'search'\r\n    this.searchButton.onclick = function () {\r\n        self.searchClicked.notify();\r\n    }\r\n    this.searchButton.innerHTML = `<i class=\"fa fa-binoculars\" aria-hidden=\"true\"></i><p>Search</p>`;\r\n    this.searchButtonDiv.appendChild(this.searchButton);\r\n    this.searchResetButton = document.createElement('button');\r\n    this.searchResetButton.onclick = function () {\r\n        self.resetClicked.notify();\r\n    }\r\n\r\n    this.searchResetButton.innerHTML = '<p>Reset</p>';\r\n    this.searchResetButton.className = 'reset'\r\n\r\n    this.searchButtonDiv.appendChild(this.searchResetButton);\r\n    return this.searchButtonDiv;\r\n}\r\n    updateSearchTable() {\r\n        this.updateSearchThead(this.searchThead);\r\n        this.updateSearchTbody(this.searchTbody);\r\n    }\r\n\r\n    createSearchDiv() {\r\n        let div = document.createElement('div');\r\n        let self = this;\r\n        div.addEventListener('keyup', function (event) {\r\n            if (event.which == 13) {\r\n                console.log('enter pressed');\r\n                self.searchClicked.notify();\r\n            }\r\n        });\r\n        return div;\r\n    }\r\n\r\n    createSearchTableElement(name) {\r\n\r\n        let tbl = document.createElement('table');\r\n        tbl.id = name + '_search';\r\n        tbl.classList.add('awesome-search-table')\r\n        tbl.classList.add('table')\r\n\r\n        return tbl;\r\n    }\r\n\r\n    createSearchThead(name) {\r\n        let thead = document.createElement('thead');\r\n        thead.id = name + '_search_thead';\r\n        return thead;\r\n    }\r\n\r\n    createSearchTbody(name) {\r\n        let tbody = document.createElement('tbody');\r\n        tbody.id = name + '_search_tbody';\r\n        return tbody;\r\n    }\r\n    createDataTableDiv(){\r\n        return document.createElement('div')\r\n    }\r\n\r\n    updateSearchThead(thead) {\r\n        let tr = thead.insertRow();\r\n        this.model.cdo.forEach(col_def => {\r\n            if (typeof col_def['search'] !== 'undefined') {\r\n\r\n                let th_width = '';\r\n                if (typeof col_def['th_width'] != 'undefined') {\r\n                    th_width = col_def['th_width'];\r\n                }\r\n                let caption = '';\r\n                if (typeof col_def['caption'] != 'undefined') {\r\n                    caption = col_def['caption'];\r\n                }\r\n\r\n                if (col_def['type'] == 'date') {\r\n\r\n                    let th = document.createElement('th');\r\n                    th.innerHTML = caption + ' Start Date';\r\n                    th.style.width = th_width;\r\n                    tr.appendChild(th);\r\n\r\n                    let th2 = document.createElement('th');\r\n                    th.style.width = th_width;\r\n                    th2.innerHTML = caption + ' END Date';\r\n                    tr.appendChild(th2);\r\n\r\n                }\r\n                else {\r\n                    let th = document.createElement('th');\r\n                    th.innerHTML = caption;\r\n                    th.style.width = th_width;\r\n                    tr.appendChild(th);\r\n                }\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    updateSearchTbody(tbody) {\r\n        let tr = tbody.insertRow();\r\n        let col_counter = 0;\r\n        this.search_elements_array = [];\r\n        this.search_elements_by_name = {};\r\n\r\n        this.model.cdo.forEach(col_def => {\r\n            if (typeof col_def['search'] != 'undefined') {\r\n                let th_width = '';\r\n                let cell_html = '';\r\n                let cell = tr.insertCell(col_counter);\r\n                cell.id = \"sr0\" + \"sc\" + col_counter;\r\n                col_counter++;\r\n                if (col_def['type'] == 'date') {\r\n                    let element = document.createElement('input');\r\n                    element.type = 'date';\r\n                    element.name = this.model.td.name + '_' + col_def['db_field'] + '_date_start';\r\n                    cell.appendChild(element);\r\n                    this.search_elements_array.push(element)\r\n                    this.search_elements_by_name[col_def['db_field'] + '_date_start']=element;\r\n                    col_def['search_element'] = [];\r\n\r\n\r\n                    col_def['search_element'][0] = element;\r\n\r\n\r\n\r\n                    cell = tr.insertCell(col_counter);\r\n                    cell.id = \"sr0\" + \"sc\" + col_counter;\r\n                    col_counter++;\r\n\r\n                    let element2 = document.createElement('input');\r\n                    element2.type = 'date';\r\n                    element2.name = this.model.td.name + '_' + col_def['db_field'] + '_date_end';\r\n\r\n                    cell.appendChild(element2);\r\n                    this.search_elements_array.push(element2)\r\n                    this.search_elements_by_name[col_def['db_field'] + '_date_end']=element2;\r\n\r\n                    col_def['search_element'][1] = element;\r\n\r\n\r\n                }\r\n                else if (col_def['type'] == 'checkbox') {\r\n                    let element = document.createElement('select');\r\n                    element.name = this.model.td.name + '_' + col_def['db_field']\r\n\r\n                    let option = document.createElement('option');\r\n                    option.value = 'null';\r\n                    option.appendChild(document.createTextNode(\"Either\"));\r\n                    element.appendChild(option);\r\n                    option = document.createElement('option');\r\n                    option.value = '1';\r\n                    option.appendChild(document.createTextNode('Checked'));\r\n                    element.appendChild(option);\r\n                    option = document.createElement('option');\r\n                    option.value = '0';\r\n                    option.appendChild(document.createTextNode('Not Checked'));\r\n                    element.appendChild(option);\r\n                    cell.appendChild(element);\r\n                    this.search_elements_array.push(element);\r\n                    this.search_elements_by_name[col_def['db_field']]=element;\r\n                    col_def['search_element'] = element;\r\n                }\r\n                else if (col_def['type'] == 'select') {\r\n                    let element = this.createSelect(col_def);\r\n                    element.name = this.model.td.name + '_' + col_def['db_field']\r\n                    cell.appendChild(element);\r\n                    this.search_elements_array.push(element)\r\n                    col_def['search_element'] = element;\r\n                    this.search_elements_by_name[col_def['db_field']]=element;\r\n\r\n\r\n                }\r\n                else if (col_def['type'] == 'tree_select') {\r\n                    let element = this.createTreeSelect(col_def);\r\n                    element.name = this.model.td.name + '_' + col_def['db_field']\r\n                    cell.appendChild(element);\r\n                    this.search_elements_array.push(element)\r\n                    this.search_elements_by_name[col_def['db_field']]=element;\r\n                    col_def['search_element'] = element;\r\n\r\n                }\r\n                else {\r\n                    let element = document.createElement('input');\r\n                    element.type = col_def.type;\r\n                    element.name = this.model.td.name + '_' + col_def['db_field']\r\n                    cell.appendChild(element);\r\n                    this.search_elements_array.push(element)\r\n                    this.search_elements_by_name[col_def['db_field']]=element;\r\n                    col_def['search_element'] = element;\r\n\r\n                }\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    addMessageInsteadOfTable(message)\r\n    {\r\n        let div = document.createElement('div');\r\n        div.innerHTML = message;\r\n        this.searchDataTableDiv.innerHTML = '';\r\n        this.searchDataTableDiv.appendChild(div);\r\n    }\r\n    addDataTable()\r\n    {\r\n        this.searchDataTableDiv.innerHTML = '';\r\n        this.searchDataTableDiv.appendChild(this.createCollectionTable())\r\n    }\r\n\r\n    destroyCollectionTable(){\r\n        this.searchDataTableDiv.innerHTML = '';\r\n    }\r\n    searching()\r\n    {\r\n        this.addMessageInsteadOfTable('searching...')\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}\n\n//# sourceURL=webpack://AwesomeTable/./src/table/SearchTableView.js?");

/***/ }),

/***/ "./src/table/SortController.js":
/*!*************************************!*\
  !*** ./src/table/SortController.js ***!
  \*************************************/
/*! exports provided: SortController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SortController\", function() { return SortController; });\nclass SortController {\r\n    constructor(controller) {\r\n        this.controller = controller;\r\n\r\n    }\r\n\r\n    getStoredSortName() {\r\n        return this.controller.model.td.name + '_sort';\r\n    }\r\n\r\n    onSort(args, search_query) {\r\n        let event = args[0];\r\n        let th = args[1];\r\n        //this code is the tri-selector: switches between none, asc, and desc\r\n        let sort_array = ['none', 'asc', 'desc'];\r\n        let i = th.sort;\r\n        i = ++i % sort_array.length;\r\n        th.sort = i;\r\n\r\n        let name = th.col_def.db_field\r\n        let self = this;\r\n\r\n        if (!event.shiftKey) {\r\n            //this.removeSortFromUri(uri,th)\r\n            this.controller.view.header_elements_array.forEach(th_element => {\r\n                if (th != th_element) {\r\n                    self.removeSort(th_element.col_def.db_field);\r\n                }\r\n            })\r\n        }\r\n        // console.log('sort array: ' + sort_array[i])\r\n        switch (sort_array[i]) {\r\n            case 'none':\r\n                // uri.deleteQueryParam(name + '_sort')\r\n                this.removeSort(name);\r\n                break;\r\n            case 'asc':\r\n                this.addSort(name, 'asc')\r\n                // uri.addQueryParam(name + '_sort', 'asc')\r\n                break;\r\n            case 'desc':\r\n                // uri.deleteQueryParam(name + '_sort')\r\n                // uri.addQueryParam(name + '_sort', 'desc')\r\n                this.removeSort(name)\r\n                this.addSort(name, 'desc')\r\n                break;\r\n        }\r\n        this.storeSort();\r\n        this.renderSort();\r\n\r\n\r\n    }\r\n\r\n    renderSort() {\r\n        this.controller.model.sortData()\r\n        this.controller.view.updateHeaderSortView();\r\n        this.controller.view.drawTbody();\r\n        this.controller.updateTable()\r\n\r\n    }\r\n\r\n    addSort(name, value) {\r\n        this.removeSort(name)\r\n        let save = {};\r\n        save[name] = value;\r\n        this.controller.model.sort.push(save);\r\n        // console.log('this.controller.model.sort')\r\n        // console.log(this.controller.model.sort)\r\n\r\n    }\r\n\r\n    storeSort() {\r\n        let sort_values = this.getSort();\r\n        // localStorage.setItem(this.getStoredSortName(), JSON.stringify(sort_values))\r\n        localStorage[this.getStoredSortName()] = JSON.stringify(sort_values);\r\n\r\n    }\r\n\r\n    getSortFromStorage() {\r\n        // return JSON.parse(localStorage.getItem(this.getStoredSortName()));\r\n        if (localStorage[this.getStoredSortName()]) {\r\n            return JSON.parse(localStorage[this.getStoredSortName()]);\r\n        }\r\n        else {\r\n            return false\r\n        }\r\n\r\n    }\r\n\r\n\r\n    loadSortFromDefault() {\r\n        //go through the column definition and add each sort...\r\n        this.controller.model.cdo.forEach(col_def => {\r\n            if (typeof col_def.sort !== 'undefined') {\r\n                this.addSort(col_def.db_field, col_def.sort)\r\n            }\r\n        })\r\n    }\r\n\r\n    removeSort(name) {\r\n        // console.log('remove sort' + name)\r\n        // console.log(JSON.stringify(this.controller.model.sort));\r\n        this.controller.model.sort = this.controller.model.sort.filter(function (el) {\r\n            let keys = Object.keys(el);\r\n            return keys[0] !== name;\r\n        });\r\n    }\r\n\r\n    removeAllSort() {\r\n        this.controller.model.sort = [];\r\n        this.deleteStoredSort();\r\n        this.renderSort();\r\n    }\r\n\r\n    getSort() {\r\n        let sort_data = {};\r\n        this.controller.model.sort.forEach(sort => {\r\n            let keys = Object.keys(sort);\r\n            sort_data[this.controller.model.td.name + '_' + keys[0] + '_sort'] = sort[keys[0]];\r\n        })\r\n        return sort_data;\r\n    }\r\n\r\n    loadSortFromQuery(query_pairs) {\r\n        this.loadSortFromKvp(query_pairs)\r\n    }\r\n\r\n    loadSortFromStorage() {\r\n        console.log(this.getSortFromStorage())\r\n        this.loadSortFromKvp(this.getSortFromStorage())\r\n    }\r\n\r\n    loadSortFromKvp(query_pairs) {\r\n        for (var key in query_pairs) {\r\n            if (query_pairs.hasOwnProperty(key)) {\r\n                if (key.includes('_sort')) {\r\n                    let name = key.replace('_sort', '')\r\n                    name = name.substring(this.controller.model.td.name.length + 1, key.length);\r\n                    this.addSort(name, query_pairs[key]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    resetStoredSort() {\r\n        this.controller.model.sort = [];\r\n    }\r\n\r\n    deleteStoredSort() {\r\n        // localStorage.removeItem(this.getStoredSortName());\r\n        delete localStorage[this.getStoredSortName()]\r\n    }\r\n}\n\n//# sourceURL=webpack://AwesomeTable/./src/table/SortController.js?");

/***/ }),

/***/ "./src/table/TableController.js":
/*!**************************************!*\
  !*** ./src/table/TableController.js ***!
  \**************************************/
/*! exports provided: TableController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TableController\", function() { return TableController; });\n/**\r\n * Created by embrasse-moi on 1/31/17.\r\n */\r\nclass TableController {\r\n    constructor(model) {\r\n        this.model = model;\r\n\r\n        //i need to get the value of an element....\r\n    }\r\n    developerAlert(msg) {\r\n        let warning = 'console' //alert\r\n        if (warning == 'console') {\r\n            console.log('Developer Alert! \\n' + msg)\r\n        }\r\n        else {\r\n            alert('Developer Alert! \\n' + msg);\r\n        }\r\n\r\n    }\r\n    updateCellValue(column_name, row, val){\r\n        this.model.tdo[row][column_name]['data'] = val;\r\n        this.view.updateRowValues(row);\r\n        this.view.updateTotals();\r\n    }\r\n    findElement(element) {\r\n        //when an event is fired from an element like an input, I am unsure which row and column it is from\r\n        //when the element is created it does not know about which row and column it is on\r\n\r\n        for(let r =0;r<this.view.tbody_cells.length;r++){\r\n            let row = this.view.tbody_cells[r];\r\n            for(let c =0;c<row.length;c++){\r\n                if(row[c].td.childNodes[0] == element){\r\n                    return [r,c]\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getElementRow(element) {\r\n        //the element is named element_r0c0 etc, so pull out the int between r and c\r\n        let rc = element.name.substring('element_'.length);\r\n        let row = parseInt(rc.substr(rc.indexOf('r') + 1, rc.indexOf('c') - 1));\r\n        return row;\r\n\r\n    }\r\n\r\n    getElementColumn(element) {\r\n        let rc = element.name.substring('element_'.length);\r\n        let col = rc.substr(rc.indexOf('c') + 1, rc.length);\r\n        return col;\r\n    }\r\n\r\n\r\n\r\n\r\n    copyElementValueToModel(element, col_def, r, array = false) {\r\n        if (this.view.checkWrite()) {\r\n\r\n            if (col_def['type'] == 'row_checkbox'\r\n                || col_def['type'] == 'checkbox'\r\n                || col_def['type'] == 'radio') {\r\n                let val = 0;\r\n                if (element.checked) {\r\n                    val = 1;\r\n                }\r\n                if (array === false) {\r\n                    this.model.tdo[r][col_def['db_field']]['data'] = val;\r\n                }\r\n                else {\r\n                    this.model.tdo[r][col_def['db_field']]['data'][array] = val;\r\n                }\r\n\r\n            }\r\n            else if (col_def['type'] == 'text'\r\n                || col_def['type'] == 'number'\r\n                || col_def['type'] == 'password'\r\n                || col_def['type'] == 'select'\r\n                || col_def['type'] == 'tree_select'\r\n                || col_def['type'] == 'textarea'\r\n                || col_def['type'] == 'date'\r\n            ) {\r\n                //might not be on there... ex: password is only on create.....\r\n                if (array === false) {\r\n                    this.model.tdo[r][col_def['db_field']]['data'] = element.value;\r\n                }\r\n                else {\r\n\r\n                    this.model.tdo[r][col_def['db_field']]['data'][array] = element.value;\r\n                }\r\n            }\r\n            else {\r\n                //do nothing\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    getPostData() {\r\n        let postData = [];\r\n        this.model.tdo.forEach((row, r) => {\r\n            postData[r] = {};\r\n            this.model.cdo.forEach((col, c) => {\r\n                if (typeof col['post'] !== 'undefined' && !col['post']) {\r\n                    //post no\r\n                }\r\n                else {\r\n\r\n                    postData[r][col['db_field']] = row[col['db_field']]['data'];\r\n                }\r\n            });\r\n        });\r\n        return postData;\r\n    }\r\n\r\n    makeEditable() {\r\n        //shared by collection and record view....\r\n\r\n        this.model.td.table_view = 'edit';\r\n        this.model.td.access = 'write';\r\n        this.view.drawTable();\r\n        //collection table might want table modify buttons...\r\n      \r\n        this.view.showRowModifyButtons();\r\n        this.setFocusToFirstInput();\r\n\r\n\r\n\r\n    }\r\n\r\n    makeReadable() {\r\n        this.model.td.table_view = 'show';\r\n        this.model.td.access = 'read';\r\n        this.view.drawTable();\r\n        //collection table might want table modify buttons...\r\n        this.view.hideRowModifyButtons();\r\n        this.setFocusToFirstInput();\r\n\r\n\r\n    }\r\n    setFocusToFirstInput(row) {\r\n        // if(this.checkRead()) return;\r\n        let elements = this.view.elements_array;\r\n        for (let i = 0; i < elements.length; i++) {\r\n\r\n            if (elements[i].type == 'text'\r\n                || elements[i].type == 'number'\r\n                || elements[i].type == 'textarea'\r\n                || elements[i].type == 'date'\r\n\r\n            ) {\r\n                elements[i].focus();\r\n\r\n//                elements[i].focus();\r\n//                 elements[i].select();\r\n                break;\r\n            }\r\n\r\n            if (elements[i].type == 'select-one'\r\n                || elements[i].type == 'select-multi'\r\n\r\n            ) {\r\n                elements[i].focus();\r\n                // elements[i].select();\r\n                break;\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n}\n\n//# sourceURL=webpack://AwesomeTable/./src/table/TableController.js?");

/***/ }),

/***/ "./src/table/TableDefinition.js":
/*!**************************************!*\
  !*** ./src/table/TableDefinition.js ***!
  \**************************************/
/*! exports provided: TableDefinition */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TableDefinition\", function() { return TableDefinition; });\n/**\r\n * Created by embrasse-moi on 1/24/17.\r\n */\r\n\r\nclass TableDefinition {\r\n    verifyTableDefinition(td){\r\n        let ok = true;\r\n        let errors = [];\r\n        if(typeof td.name === 'undefined'){\r\n            //problem\r\n            ok = false;\r\n            errors.push('name is not defined')\r\n        }\r\n\r\n\r\n    }\r\n    td() {\r\n        let td = {\r\n            \"name\": \"name\",\r\n            \"access\": \"READ WRITE\",\r\n            \"buttons\": ['selectRows', 'addRow','deleteRow','deleteAllRows', 'moveRows','copyRows', 'addColumn', 'deleteColumn', 'edit'],\r\n            \"table_view\": \"index show create edit\",\r\n            \"route\": \"vendors  routes: vendor post is search, vendor put vendor patch vendor delete \",\r\n            \"footer\": [],\r\n            \"header\": [],\r\n            \"column_definition\": this.cd(),\r\n            getData: function(){\r\n                //a callback funtion to return either an array or false.\r\n                //for example\r\n                let data = [];\r\n                data [0] = {};\r\n                data[0].name = 'name'\r\n                return data;\r\n                //or return false\r\n            },\r\n            onChange: function (args, r, c) {\r\n            },\r\n            onSaveClick(){\r\n                alert('save')\r\n            },\r\n            onSaveSuccess(){\r\n                alert('saved')\r\n            },\r\n            onDeleteClick(){\r\n                alert('delete');\r\n            },\r\n            onDeleteSuccess(){\r\n                alert('deleted');\r\n            },\r\n            onCreateSaved(id){\r\n                alert('deleted');\r\n            },\r\n            onCancelClick(){\r\n                //cancel create, cancel edit, anything else?\r\n                alert('canceled');\r\n            },\r\n            onCancelCreateClick(){\r\n                alert('canceled');\r\n            },\r\n            onHeaderArrayClick(args){\r\n            },\r\n            onSearchClick(){\r\n\r\n            }\r\n\r\n\r\n        };\r\n        return td;\r\n    }\r\n\r\n\r\n\r\n}\n\n//# sourceURL=webpack://AwesomeTable/./src/table/TableDefinition.js?");

/***/ }),

/***/ "./src/table/TableEvent.js":
/*!*********************************!*\
  !*** ./src/table/TableEvent.js ***!
  \*********************************/
/*! exports provided: TableEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TableEvent\", function() { return TableEvent; });\n/**\r\n * Created by embrasse-moi on 1/24/17.\r\n */\r\nclass TableEvent {\r\n//https://gist.github.com/kennethkau/f041a0236a2dd0438522d394073e7d6e\r\n  constructor (sender) {\r\n      this._sender = sender;\r\n      this._listeners = [];\r\n  }\r\n  attach (listener){\r\n      this._listeners.push(listener);\r\n  }\r\n  notify (args){\r\n      for (let i = 0; i < this._listeners.length; i += 1) {\r\n          this._listeners[i](this._sender, args);\r\n      }\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://AwesomeTable/./src/table/TableEvent.js?");

/***/ }),

/***/ "./src/table/TableEvents.js":
/*!**********************************!*\
  !*** ./src/table/TableEvents.js ***!
  \**********************************/
/*! exports provided: TableEvents */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TableEvents\", function() { return TableEvents; });\n/* harmony import */ var _TableEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TableEvent */ \"./src/table/TableEvent.js\");\n\r\n\r\nclass TableEvents {\r\n    constructor(controller) {\r\n        let view = controller.view;\r\n        let model = controller.model;\r\n\r\n\r\n\r\n\r\n        //##################   SAVE\r\n        view.onSaveClick = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](view);\r\n        controller.view.onSaveClick.attach(\r\n            function () {\r\n                if(typeof controller.model.td.onSaveClick === 'function'){\r\n                    return controller.model.td.onSaveClick();\r\n                }\r\n\r\n            }\r\n        );\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\n\n//# sourceURL=webpack://AwesomeTable/./src/table/TableEvents.js?");

/***/ }),

/***/ "./src/table/TableModel.js":
/*!*********************************!*\
  !*** ./src/table/TableModel.js ***!
  \*********************************/
/*! exports provided: TableModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TableModel\", function() { return TableModel; });\n/* harmony import */ var _TableEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TableEvent */ \"./src/table/TableEvent.js\");\n/* harmony import */ var _lib_array_help__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/array_help */ \"./src/lib/array_help.js\");\n/* harmony import */ var _lib_math__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/math */ \"./src/lib/math.js\");\n/**\r\n * Created by embrasse-moi on 1/19/17.\r\n */\r\n\r\n\r\n\r\n\r\nclass TableModel {\r\n    /*\r\n     table model takes the column and data\r\n     and delivers a 2d array back\r\n     which models how the view should look....\r\n     */\r\n    constructor(name) {\r\n\r\n        //first by is used for sorting.....\r\n        //might want this gone.....\r\n        this.firstBy = __webpack_require__(/*! thenby */ \"./node_modules/thenby/thenBy.module.js\");\r\n\r\n\r\n        this.sort = []; //[{name:'asc'},{name:'desc'}....]\r\n\r\n\r\n        //the row data object holds information about how to treat entire row... for example highlight a row\r\n        this.rdo = {};\r\n\r\n        //here are a few table events\r\n        this.modelChanged = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](this);\r\n        this.newRow = new _TableEvent__WEBPACK_IMPORTED_MODULE_0__[\"TableEvent\"](this);\r\n\r\n        let self = this;\r\n        this.modelChanged.attach(function () {\r\n            self.updateTableObjectLineNumbers()\r\n\r\n        });\r\n\r\n\r\n    }\r\n    getData(db_field, r, c){\r\n        if(Array.isArray(this.tdo[r][db_field].data)){\r\n            return this.tdo[r][db_field].data[c];\r\n        }\r\n        return this.tdo[r][db_field].data;\r\n    }\r\n    sumArray(db_field, r){\r\n\r\n        if(Array.isArray(this.tdo[r][db_field].data)){\r\n\r\n            let sum = 0;\r\n            for (let i = 0; i < this.tdo[r][db_field].data.length; i++) {\r\n                sum += Object(_lib_math__WEBPACK_IMPORTED_MODULE_2__[\"myParseFloat\"])(this.tdo[r][db_field].data[i]);\r\n            }\r\n            return sum;\r\n            //return this.tdo[r][db_field].data.reduce((a, b) => a + b, 0);\r\n        }\r\n        else{\r\n            alert('Developer Error\\n You are asking for an array sum for non array')\r\n\r\n        }\r\n    }\r\n    sumColumn(db_field){\r\n        let sum = 0;\r\n        for(let i=0; i<this.tdo.length; i++){\r\n            sum += Object(_lib_math__WEBPACK_IMPORTED_MODULE_2__[\"myParseFloat\"])(this.tdo[i][db_field].data);\r\n        }\r\n        return sum\r\n    }\r\n    loadColumnDefinition(column_definition) {\r\n        //the column definition has view properties and data properties\r\n        //I feel it is mostly related to the model\r\n        this.cdo = column_definition;\r\n    }\r\n\r\n    loadData(data) {\r\n        this.backup_data = data;\r\n        this.tdo = [];\r\n        // console.log('data');\r\n        //  console.log(data);\r\n\r\n        for (let i = 0; i < data.length; i++) {\r\n            this.addDataRow(data[i]);\r\n        }\r\n\r\n        this.sortData();\r\n        this.saveBackupData();\r\n\r\n        //pulled this from the controller creation.... not sure if it is needed?\r\n        // if (this.tdo.length == 0) {\r\n        //     this.addNewRow();\r\n        // }\r\n        this.modelChanged.notify();\r\n\r\n\r\n    }\r\n    saveBackupData(){\r\n        this.backup_data = JSON.stringify(this.tdo);\r\n    }\r\n    loadBackupData() {\r\n        this.tdo = JSON.parse(this.backup_data);\r\n    }\r\n\r\n\r\n    dynamicSort(property) {\r\n        let sortOrder = 1;\r\n        if (property[0] === \"-\") {\r\n            sortOrder = -1;\r\n            property = property.substr(1);\r\n        }\r\n        return function (a, b) {\r\n            let result = (a[property].data < b[property].data) ? -1 : (a[property].data > b[property].data) ? 1 : 0;\r\n            return result * sortOrder;\r\n        }\r\n    }\r\n\r\n    sortData() {\r\n        //TODO fix sort it kinda works but not really....\r\n\r\n\r\n        //sort_array looks like [{db_field:'asc'},etc...]\r\n        //we need to sort row based on data for this.tdo[row][db_filed]['data']\r\n        // this.tdo.sort((a,b) => {\r\n        //     sort_array.forEach(sort => {\r\n        //         let keys = Object.keys(sort);\r\n        //         let name = keys[0];\r\n        //         if(sort[keys[0]] =='asc')\r\n        //         {\r\n        //             this.tdo = this.tdo.sort(this.dynamicSort(name));\r\n        //         }\r\n        //         else\r\n        //         {\r\n        //             this.tdo = this.tdo.sort(this.dynamicSort('-'+name));\r\n        //         }\r\n        //     })\r\n        //\r\n        // })\r\n\r\n\r\n        let sort_stack = this.firstBy(function (v1, v2) {\r\n            return 0\r\n        });\r\n        this.sort.forEach(sort => {\r\n            let keys = Object.keys(sort);\r\n            let name = keys[0];\r\n            if (sort[keys[0]] == 'asc') {\r\n                sort_stack = sort_stack.thenBy(function (v1) {\r\n                    return v1[name].data;\r\n                });\r\n            }\r\n            else {\r\n                sort_stack = sort_stack.thenBy(function (v1) {\r\n                    return v1[name].data;\r\n                }, -1);\r\n            }\r\n        })\r\n\r\n        this.tdo.sort(sort_stack);\r\n\r\n\r\n    }\r\n\r\n    addDataRow(data_row) {\r\n\r\n        let row_number = this.addNewRow();\r\n        this.cdo.forEach(col_definition => {\r\n            //console.log(col_definition);\r\n            this.addItem(col_definition, data_row, row_number);\r\n        })\r\n        //this.updateTableObjectLineNumbers();\r\n        //this should render the view but the view may not exist\r\n        this.modelChanged.notify();\r\n        return row_number;\r\n    }\r\n\r\n    addNewRow() {\r\n        let row = this.rowCount();\r\n        this.tdo[row] = {};\r\n        //'_row' holds the properties for the row.\r\n        this.tdo[row].__row__ = {};\r\n        this.tdo[row].__row__.header_row = {};\r\n\r\n\r\n        this.cdo.forEach(col => {\r\n            let data = '';\r\n            if (typeof col['default_value'] !== 'undefined') {\r\n                data = col['default_value']\r\n            }\r\n            if (typeof col.caption !== 'undefined' && Array.isArray(col.caption)) {\r\n\r\n                let data_array = [];\r\n                this.tdo[row][col['db_field']] = {};\r\n                col.caption[0].forEach((capt, i) => {\r\n                    data_array[i] = data;\r\n                });\r\n                this.tdo[row][col['db_field']]['data'] = data_array;\r\n                this.tdo[row][col['db_field']]['cell'] = {};\r\n                //this keeps track of which header row correlates to the data row...\r\n                this.tdo[row].__row__.header_row[col.db_field] = null;\r\n\r\n\r\n            }\r\n            else {\r\n                this.tdo[row][col['db_field']] = {};\r\n                this.tdo[row][col['db_field']]['data'] = data;\r\n                this.tdo[row][col['db_field']]['cell'] = {};\r\n\r\n            }\r\n\r\n\r\n        })\r\n\r\n        this.modelChanged.notify();\r\n        this.newRow.notify();\r\n\r\n        return row;\r\n    }\r\n\r\n    addItem(col, item_data, row) {\r\n        //make sure item data is not an array.. done it before@@\r\n\r\n        let data = '';\r\n        if (typeof item_data[col['db_field']] !== 'undefined') {\r\n            data = item_data[col['db_field']];\r\n\r\n        }\r\n        else {\r\n            if (typeof col['default_value'] !== 'undefined') {\r\n                data = col['default_value'];\r\n            }\r\n            else {\r\n                data = '';\r\n            }\r\n\r\n        }\r\n        if (typeof col['row_number'] !== 'undefined') {\r\n            data = this.tdo.length;\r\n            console.log('setting row number to ' + data )\r\n\r\n        }\r\n        else {\r\n\r\n            this.tdo[row][col['db_field']] = {};\r\n            this.tdo[row][col['db_field']]['data'] = data;\r\n            this.tdo[row][col['db_field']]['cell'] = {};\r\n\r\n        }\r\n        // console.log(this.tdo[row])\r\n    }\r\n\r\n    updateTableObjectLineNumbers() {\r\n        //db_field has to be 'row_number' for this to work\r\n        //we need to loop through the tbody cells and set the value of the column name bla bla\r\n        let col = this.getCDOColumnNumberFromName('row_number');\r\n        if (col != -1) {\r\n            for (let row = 0; row < this.tdo.length; row++) {\r\n                this.tdo[row]['row_number']['data'] = row + 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    getCDOColumnNumberFromName(name) {\r\n        let column = -1;\r\n        this.cdo.forEach((col, i) => {\r\n            if (typeof col['db_field'] !== 'undefined' && col['db_field'] == name) {\r\n                column = i;\r\n            }\r\n\r\n        })\r\n        return column;\r\n    }\r\n    getColDef(name){\r\n        return this.cdo[this.getCDOColumnNumberFromName(name)];\r\n    }\r\n\r\n    rowCount() {\r\n        return this.tdo.length;\r\n    }\r\n\r\n    copyRows(row_array, place = 'bottom') {\r\n        //copying objects is a bit of a bitch... as long as there are no functions this will work\r\n        let newRowCounter = 0;\r\n        let new_tdo = [];\r\n        this.tdo.forEach((row, r) => {\r\n            // we are keeping this row.\r\n            new_tdo[newRowCounter] = JSON.parse(JSON.stringify(row));\r\n            newRowCounter++;\r\n            // if the row is in the checked row array it is copied\r\n            if (Object(_lib_array_help__WEBPACK_IMPORTED_MODULE_1__[\"isValueInArray\"])(r, row_array)) {\r\n                //copy\r\n                new_tdo[newRowCounter] = JSON.parse(JSON.stringify(row));\r\n                //set the checkvalue to zero....\r\n                new_tdo[newRowCounter].row_checkbox.data = 0;\r\n                newRowCounter++;\r\n            }\r\n\r\n        });\r\n\r\n\r\n        // console.log('New TDO');\r\n        // console.log(new_tdo);\r\n        this.tdo = new_tdo;\r\n        this.modelChanged.notify();\r\n        // console.log('New TDO');\r\n        // console.log(this.tdo);\r\n\r\n    }\r\n\r\n    moveRow(RowToMove, RowToMoveTo) {\t//ex row 2 row 3\r\n        let new_tdo = [];\r\n        for (let i = 0; i < this.tdo.length; i++) {\r\n            if (RowToMove == i) {\r\n                new_tdo[i] = this.tdo[RowToMoveTo];\r\n            }\r\n            else if (RowToMoveTo == i) {\r\n                new_tdo[i] = this.tdo[RowToMove];\r\n            }\r\n            else {\r\n                new_tdo[i] = this.tdo[i];\r\n            }\r\n        }\r\n        this.tdo = new_tdo;\r\n        this.modelChanged.notify();\r\n    }\r\n\r\n    deleteRows(row_array) {\r\n        this.modelChanged.notify();\r\n        let newRowCounter = 0;\r\n        let new_tdo = [];\r\n\r\n        for (let row = 0; row < this.tdo.length; row++) {\r\n            // if the row is in the checked row array it is gonzo\r\n            if (Object(_lib_array_help__WEBPACK_IMPORTED_MODULE_1__[\"isValueInArray\"])(row, row_array)) {\r\n                //delete\r\n            }\r\n            else {\r\n                // we are keeping this row.\r\n                new_tdo[newRowCounter] = this.tdo[row];\r\n                newRowCounter++;\r\n            }\r\n\r\n        }\r\n        //console.log(new_tdo)\r\n        this.tdo = new_tdo;\r\n        this.modelChanged.notify();\r\n\r\n    }\r\n\r\n    DeleteAllRows() {\r\n        this.tdo = [];\r\n        this.modelChanged.notify();\r\n\r\n    }\r\n\r\n    getDbFieldArray(db_field) {\r\n        let return_array = [];\r\n        this.tdo.forEach(data_row => {\r\n            return_array.push(data_row[db_field].data + '')\r\n        })\r\n        return return_array;\r\n    }\r\n\r\n    addColumnToArray(col) {\r\n        this.cdo[col].caption.forEach(caption_col => {\r\n            caption_col.push('');\r\n        });\r\n\r\n\r\n        let db_field = this.cdo[col].db_field;\r\n\r\n        this.tdo.forEach(row => {\r\n            row[db_field]['data'].push('');\r\n            console.log(row[db_field].data);\r\n        });\r\n        this.modelChanged.notify();\r\n    }\r\n\r\n    deleteColumnFromArray(col) {\r\n        this.cdo[col].caption.forEach(caption_col => {\r\n            caption_col.pop();\r\n        });\r\n        let db_field = this.cdo[col].db_field;\r\n        this.tdo.forEach(row => {\r\n            row[db_field]['data'].pop();\r\n        });\r\n        this.modelChanged.notify();\r\n    }\r\n    getFooterValue(db_field, footer_row){\r\n        let col = this.getCDOColumnNumberFromName(db_field);\r\n        //execute the function...\r\n        if (typeof this.cdo[col].footer[footer_row].getValue === 'function'){\r\n            return this.cdo[col].footer[footer_row].getValue();\r\n        }\r\n        else{\r\n            console.log('Developer alert ' + db_field + ' footer .getValue needs to be a function')\r\n        }\r\n    }\r\n    calculate() {\r\n\r\n\r\n        let row_functions = this.td.row_calculations;\r\n        if (typeof  row_functions !== 'undefined'){\r\n            for (let i = 0; i < this.tdo.length; i++) {\r\n                //pass the row in to each function defined\r\n                for (let j = 0; j < row_functions.length; j++) {\r\n                    row_functions[j](i);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}\n\n//# sourceURL=webpack://AwesomeTable/./src/table/TableModel.js?");

/***/ }),

/***/ "./src/table/TableView.js":
/*!********************************!*\
  !*** ./src/table/TableView.js ***!
  \********************************/
/*! exports provided: TableView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TableView\", function() { return TableView; });\n/* harmony import */ var _lib_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/math */ \"./src/lib/math.js\");\n/* harmony import */ var _TableEvent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TableEvent */ \"./src/table/TableEvent.js\");\n/**\r\n * Created by embrasse-moi on 1/20/17.\r\n */\r\n\r\n\r\n\r\n// import {ErrorModal} from '../modal/ErrorModal'\r\n// import {FormModal} from '../modal/FormModal'\r\n// import {createWaitModal} from '../modal/waitModal'\r\n// import {createConfirmModal} from '../modal/confirmModal'\r\n\r\n\r\nclass TableView {\r\n\r\n\r\n    constructor(model) {\r\n        this.model = model;\r\n\r\n        // this.id = this.model.td.name;\r\n\r\n        //modals need to move out.....\r\n        // this.errorModal = new ErrorModal(this.model.td.name + '_error_modal');\r\n        // this.formModal = new FormModal(this.model.td.name + '_form_modal');\r\n        // this.waitModal = createWaitModal();\r\n        // this.confirmModal = createConfirmModal();\r\n\r\n        // this.name = this.id;\r\n    }\r\n\r\n    getTimeValue(mess_string){\r\n        \r\n        if(mess_string)\r\n        {\r\n            if(mess_string.indexOf(\"T\")){\r\n            return (mess_string.substring(mess_string.indexOf(\"T\")+1,mess_string.length))\r\n\r\n            }\r\n            else{\r\n                return mess_string;\r\n            } \r\n        }\r\n        else{\r\n            return mess_string;\r\n        }\r\n        \r\n\r\n        //could be date time\r\n        //could be a time....\r\n        //return mess_string;\r\n        // var dt = new Date(mess_string);\r\n        // var hr = dt.getHours() + ':' + dt.getMinutes() + ':' + dt.getSeconds();\r\n        // var hr = dt.toLocaleTimeString();\r\n        // var hr = dt.toTimeString();\r\n\r\n        \r\n         // return hr;\r\n    }\r\n     getDateValue(mess_string){\r\n\r\n        //incoming string ****has to be yyyy-mm-dd *******\r\n        if(mess_string){\r\n        return mess_string.substring(0,10);\r\n\r\n        }\r\n        else\r\n        {\r\n            return mess_string;\r\n        }\r\n\r\n        // var dt = new Date(mess_string);\r\n        // // var hr = dt.getHours() + ':' + dt.getMinutes() + ':' + dt.getSeconds();\r\n        // // var hr = dt.getFullYear() + '-' + dt.getMonth() + '-' + dt.getDate();\r\n        // var hr = dt.toISOString();\r\n\r\n        \r\n        //  return hr;\r\n    }\r\n\r\n    writeCellValue(col_def, cell, value) {\r\n\r\n\r\n        if(this.checkRead()){\r\n            //this is weird? why do I have to redraw shit on read?\r\n            if (col_def['type'] == 'id') {\r\n                cell.innerHTML = value;\r\n                cell.classList.add('awesome_table_record_id')\r\n                if(typeof col_def.onClick !== 'undefined'){\r\n                    cell.addEventListener('click',function(){\r\n                        col_def.onClick(value)\r\n                    })\r\n                }\r\n            }\r\n            else if (col_def.type == 'date'){\r\n\r\n               cell.innerHTML = this.getDateValue(value);\r\n                \r\n            }\r\n            else if (col_def.type == 'time'){\r\n               cell.innerHTML = this.getTimeValue(value);\r\n            }\r\n            else if(col_def['type'] == 'link'){\r\n                cell.innerHTML = '<a href=\"' + value + '\">'+value+'</a>';\r\n            }\r\n            // else  if(col_def['type'] == 'checkbox')\r\n            // {\r\n            //     cell.innerHTML = '';\r\n            //     cell.appendChild(this.createCheckBox(col_def, value))\r\n            // }\r\n            // else  if(col_def['type'] == 'radio')\r\n            // {\r\n            //     cell.innerHTML = '';\r\n            //     cell.appendChild(this.createRadio(col_def, value))\r\n            // }\r\n            else{\r\n                cell.innerHTML=value;\r\n\r\n            }\r\n        }\r\n        else{\r\n            let element = cell.childNodes[0]\r\n            if (col_def['type'] == 'row_checkbox'\r\n                || col_def['type'] == 'checkbox'\r\n                || col_def['type'] == 'radio') {\r\n                if (value == 1) {\r\n                    element.checked = true;\r\n                }\r\n                else {\r\n                    element.checked = false;\r\n                }\r\n\r\n            }\r\n            else if (col_def.type == 'row_number'){\r\n                cell.innerHTML=value;\r\n            }\r\n            else if (col_def.type == 'link'){\r\n                cell.innerHTML=value;\r\n            }\r\n            else if (col_def.type == 'time'){\r\n                //cell.innerHTML=value;\r\n               element.value = this.getTimeValue(value);\r\n\r\n            }\r\n            else if (col_def.type == 'date'){\r\n\r\n               element.value = this.getDateValue(value);\r\n                \r\n            }\r\n            else {\r\n                element.value = value;\r\n\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    checkWrite() {\r\n        let write = false;\r\n        if (this.model.td.access.toUpperCase() == \"WRITE\") write = true;\r\n        return write;\r\n    }\r\n\r\n    checkRead() {\r\n        return !this.checkWrite();\r\n    }\r\n\r\n    drawTableEditSaveButtons() {\r\n\r\n        this.edit_button_div.innerHTML = '';\r\n        if (this.checkRead()) {\r\n            if (this.model.td.table_buttons.includes('delete')) {\r\n                this.edit_button_div.appendChild(this.createDeleteButton());\r\n            }\r\n            if (this.model.td.table_buttons.includes('edit')) {\r\n                this.edit_button_div.appendChild(this.createEditButton());\r\n            }\r\n\r\n        }\r\n        else {\r\n            if (this.model.td.table_buttons.includes('edit')) {\r\n                this.edit_button_div.appendChild(this.createCancelButton());\r\n                this.edit_button_div.appendChild(this.createSaveButton());\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    createElement(data, col_def, r, c) {\r\n\r\n        this.r = r;\r\n        this.c = c;\r\n        let db_field = col_def['db_field'];\r\n        switch (col_def.type.toLowerCase()) {\r\n            case 'date':\r\n                return this.createDateInput(col_def);\r\n                break;\r\n            case 'text':\r\n                return this.createTextInput(col_def);\r\n                break;\r\n            case 'password':\r\n                return this.createPasswordInput(col_def);\r\n                break;\r\n            case 'textarea':\r\n                return this.createTextArea(col_def);\r\n                break;\r\n            case 'number':\r\n                return this.createNumberInput(col_def);\r\n                break;\r\n            case 'checkbox':\r\n                return this.createCheckBox(col_def);\r\n                break;\r\n            case 'row_checkbox':\r\n                return this.createRowCheckbox(col_def);\r\n                break;\r\n            case 'row_number':\r\n                return this.createRowNumber(col_def);\r\n                break;\r\n            case 'select':\r\n                return this.createDataTableSelect(col_def);\r\n                break;\r\n            case 'tree_select':\r\n                return this.createDataTableTreeSelect(col_def);\r\n                break;\r\n            case 'html':\r\n                return this.createTextNode(col_def);\r\n                break;\r\n            case 'radio':\r\n                return this.createRadio(col_def);\r\n                break;\r\n            case 'button':\r\n                return this.createButton(col_def);\r\n                break;\r\n            case 'link':\r\n                return this.createLink(col_def);\r\n                break;\r\n            case 'id':\r\n                return this.createId(col_def);\r\n                break;\r\n            case 'time':\r\n                return this.createTime(col_def);\r\n                break;\r\n            default:\r\n                return document.createTextNode('type \"' + col_def.type + '\" has not been coded');\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    createTextArea(col_def) {\r\n        if (this.checkWrite()) {\r\n            let element = document.createElement(\"TEXTAREA\");\r\n            let self = this;\r\n            element.addEventListener(\"keyup\", function () {\r\n                self.addInputChangedNotify(element, col_def)\r\n            });\r\n            this.addEvents(col_def, element);\r\n            this.addProperties(col_def, element);\r\n\r\n\r\n            return element;\r\n        }\r\n        else {\r\n           \r\n            return document.createTextNode('');\r\n        }\r\n\r\n\r\n    }\r\n\r\n    createCheckBox(col_def) {\r\n        let element = document.createElement('input');\r\n        element.type = 'checkbox';\r\n        //element.name = col_def.db_field + '[]';\r\n        //element.id = col_def.db_field + '_search';\r\n        let self = this;\r\n        element.addEventListener(\"change\", function () {\r\n            self.addInputChangedNotify(element, col_def)\r\n\r\n        });\r\n        this.addEvents(col_def, element);\r\n        //element.onclick = function(){self.inputChanged.notify()}\r\n        // if (data == true || data == \"1\" || data == 1 || data == \"true\") {\r\n        //     element.checked = true;\r\n        // }\r\n\r\n        if (this.checkWrite()) {\r\n            this.addProperties(col_def, element);\r\n        }\r\n        else {\r\n            element.disabled = true;\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    createRowCheckbox(col_def) {\r\n        if (this.checkWrite()) {\r\n            let element = document.createElement('input');\r\n            element.type = 'checkbox';\r\n            //element.name = col_def.db_field + '[]';\r\n            //element.id = col_def.db_field + '_search';\r\n            // if (data) {\r\n            //     element.checked = true;\r\n            // }\r\n            let self = this;\r\n            element.addEventListener(\"click\", function () {\r\n                self.addInputChangedNotify(element, col_def)\r\n\r\n            });\r\n            this.addEvents(col_def, element);\r\n            this.addProperties(col_def, element);\r\n            //element.value = data;\r\n            // element.onclick = function(){self.inputChanged.notify()};\r\n            return element;\r\n        }\r\n        else {\r\n            // do not show on read\r\n\r\n        }\r\n    }\r\n\r\n    createRowNumber(col_def) {\r\n        let element = document.createTextNode('');\r\n        return element;\r\n    }\r\n\r\n    createNumberInput(col_def) {\r\n        if (this.checkWrite()) {\r\n            //can be text, number\r\n            let element = document.createElement('input');\r\n            element.type = 'number';\r\n            element.pattern = \"[0-9. -]*\"\r\n            let self = this;\r\n\r\n\r\n\r\n            element.addEventListener(\"keyup\", function () {\r\n                self.addInputChangedNotify(element, col_def)\r\n            });\r\n            element.addEventListener(\"click\", function () {\r\n                self.addInputChangedNotify(element, col_def)\r\n            });\r\n            element.addEventListener(\"change\", function () {\r\n                self.addInputChangedNotify(element, col_def)\r\n            });\r\n            this.addEvents(col_def, element);\r\n\r\n\r\n            this.addProperties(col_def, element);\r\n\r\n            this.addMinMax(col_def, element);\r\n\r\n            if (typeof col_def['round'] != 'undefined') {\r\n                //if(isNumber(data)) {\r\n                // data = myParseFloat(data);\r\n                // data = round2(data, col_def['round']);\r\n                //}\r\n            }\r\n            //element.value = data;\r\n            return element;\r\n        }\r\n        else {\r\n            if (typeof col_def['round'] != 'undefined') {\r\n               // data = myParseFloat(data);\r\n               // data = round2(data, col_def['round']);\r\n            }\r\n            return document.createTextNode('');\r\n        }\r\n    }\r\n\r\n    addMinMax(col_def, element) {\r\n        if (typeof col_def['min'] != 'undefined') {\r\n            element.min = col_def['min'];\r\n        }\r\n        if (typeof col_def['max'] != 'undefined') {\r\n            element.max = col_def['max'];\r\n        }\r\n    }\r\n\r\n    createTextInput(col_def) {\r\n        if (this.checkWrite()) {\r\n            let element = document.createElement('input');\r\n            element.type = 'text';\r\n            if (typeof col_def.placeholder != 'undefined' && col_def.placeholder) {\r\n                element.placeholder = col_def.placeholder;\r\n            }\r\n\r\n            let self = this;\r\n\r\n            //this is ok....\r\n            element.addEventListener(\"keyup\", function () {\r\n                self.addInputChangedNotify(element, col_def)\r\n\r\n            });\r\n            //this is more like a set focus.... but really have no idea....could change....\r\n            element.addEventListener(\"click\", function () {\r\n                self.addInputChangedNotify(element, col_def)\r\n\r\n            });\r\n            this.addEvents(col_def, element);\r\n            // element.onkeyup = function(){self.inputChanged.notify()}\r\n            this.addProperties(col_def, element);\r\n           // element.value = data;\r\n            return element;\r\n        }\r\n        else {\r\n            // if (data) {\r\n            //     return document.createTextNode(data);\r\n            // }\r\n            return document.createTextNode('');\r\n        }\r\n    }\r\n\r\n    createPasswordInput(col_def, ) {\r\n        if (this.checkWrite()) {\r\n            //can be text, number\r\n            let element = document.createElement('input');\r\n            element.type = 'password';\r\n            element.name = col_def['db_field'] + '[]';\r\n\r\n            let self = this;\r\n            element.addEventListener(\"keyup\", function () {\r\n                self.addInputChangedNotify(element, col_def)\r\n            });\r\n            this.addEvents(col_def, element);\r\n            // element.onkeyup = function(){self.inputChanged.notify()}\r\n            this.addProperties(col_def, element);\r\n            //element.value = data;\r\n            return element;\r\n        }\r\n        else {\r\n            return document.createTextNode('');\r\n        }\r\n    }\r\n\r\n    createDateInput(col_def) {\r\n\r\n        //var dt = new Date(data);\r\n\r\n        //console.log(dt);\r\n        //var hr = dt.toISOString();\r\n        //console.log(hr);\r\n\r\n        if (this.checkWrite()) {\r\n            let element = document.createElement('input');\r\n            element.type = 'date';\r\n            //element.name = 'element_' + cell.id;\r\n            //element.id = element.name;\r\n            if (typeof col_def.placeholder != 'undefined' && col_def.placeholder) {\r\n                element.placeholder = col_def.placeholder;\r\n            }\r\n            //element.value = data;\r\n            let self = this;\r\n            element.addEventListener(\"change\", function () {\r\n                self.addInputChangedNotify(element, col_def)\r\n\r\n            });\r\n            this.addEvents(col_def, element);\r\n\r\n            return element;\r\n        }\r\n        else {\r\n            return document.createTextNode('');\r\n        }\r\n\r\n\r\n    }\r\n\r\n    createTime(col_def){\r\n\r\n\r\n        if (this.checkWrite()) {\r\n            let element = document.createElement('input');\r\n            element.type = 'time';\r\n            if (typeof col_def.placeholder != 'undefined' && col_def.placeholder) {\r\n                element.placeholder = col_def.placeholder;\r\n            }\r\n\r\n            let self = this;\r\n\r\n            //this is ok....\r\n            element.addEventListener(\"keyup\", function () {\r\n                self.addInputChangedNotify(element, col_def)\r\n\r\n            });\r\n            //this is more like a set focus.... but really have no idea....could change....\r\n            element.addEventListener(\"click\", function () {\r\n                self.addInputChangedNotify(element, col_def)\r\n\r\n            });\r\n            this.addEvents(col_def, element);\r\n            this.addProperties(col_def, element);\r\n            // element.value = hr;\r\n            return element;\r\n        }\r\n        else {\r\n            // if (data) {\r\n            //     return document.createTextNode();\r\n            // }\r\n            return document.createTextNode('');\r\n        }\r\n    }\r\n    createLink(col_def) {\r\n        if (this.model.td.table_view == 'index') {\r\n            let a = document.createElement('a');\r\n            let c = document.createTextNode('');\r\n            a.appendChild(c);\r\n\r\n\r\n            if (typeof col_def.onClick === 'function') {\r\n                a.addEventListener(\"click\", function () {\r\n                    col_def.onClick();\r\n                });\r\n            }\r\n            else {\r\n\r\n            }\r\n\r\n            return a;\r\n\r\n        }\r\n        else {\r\n            //on the show page we do not want a link....\r\n            return this.createTextNode('');\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n    createId(col_def) {\r\n        if (this.model.td.table_view == 'index') {\r\n            let a = document.createElement('a');\r\n            let c = document.createTextNode('');\r\n            a.appendChild(c);\r\n            if (typeof col_def.onClick === 'function') {\r\n                a.addEventListener(\"click\", function () {\r\n                    //col_def.onClick(data);\r\n                });\r\n            }\r\n            return a;\r\n        }\r\n        else {\r\n            //on the show page we do not want a link....\r\n            return this.createTextNode(col_def);\r\n\r\n        }\r\n\r\n\r\n    }\r\n    createButton(col_def) {\r\n        let element = document.createElement('button');\r\n        //element.id = db_field + '_sr' + r;\r\n        element.className = \"button\";\r\n        if (typeof col_def['button_caption'] != 'undefined') {\r\n            let t = document.createTextNode(col_def['button_caption']);\r\n            element.appendChild(t);\r\n        }\r\n        this.addEvents(col_def, element);\r\n        this.addProperties(col_def, element);\r\n\r\n        return element;\r\n    }\r\n\r\n    createTextNode(col_def) {\r\n        // if (typeof col_def['round'] != 'undefined') {\r\n        //     if (isNumber(data)) {\r\n        //         data = myParseFloat(data);\r\n        //         data = round2(data, col_def['round']);\r\n        //     }\r\n\r\n        // }\r\n        return document.createTextNode(\"\");\r\n    }\r\n\r\n    createRadio(col_def) {\r\n        let element = document.createElement('input');\r\n        element.type = 'radio';\r\n        element.name = col_def['db_field'] + '[]';\r\n        let self = this;\r\n        element.addEventListener(\"onclick\", function () {\r\n           self.addInputChangedNotify(element, col_def)\r\n        });\r\n        this.addEvents(col_def, element);\r\n\r\n        // element.onclick = function(){self.inputChanged.notify()};\r\n        // if (data == 1) {\r\n        //     element.checked = true;\r\n        // }\r\n        if (this.checkWrite()) {\r\n            this.addProperties(col_def, element);\r\n        }\r\n        else {\r\n            element.disabled = true;\r\n        }\r\n        return element;\r\n    }\r\n    addInputChangedNotify(element, col_def){\r\n        let custom_parameters = {}\r\n        custom_parameters.r = this.r;\r\n        custom_parameters.c = this.c;\r\n        custom_parameters.element = element\r\n        custom_parameters.col_def = col_def\r\n\r\n\r\n\r\n        this.inputChanged.notify(custom_parameters)\r\n    }\r\n    addEvents(col_def, element) {\r\n        let custom_parameters = {}\r\n        custom_parameters.r = this.r;\r\n        custom_parameters.c = this.c;\r\n        custom_parameters.col_def = col_def\r\n\r\n        if (typeof col_def['events'] !== 'undefined') {\r\n            for (var key in col_def['events']) {\r\n                if (col_def['events'].hasOwnProperty(key)) {\r\n                    // element.addEventListener(key, col_def['events'][key],custom_parameters);\r\n                    // console.log(custom_parameters)\r\n                    element.addEventListener(key, function(e){\r\n                        let callback = col_def['events'][key];\r\n                        callback(e,custom_parameters)\r\n                    });\r\n\r\n\r\n                }\r\n\r\n\r\n                // col_def.events.forEach(event => {\r\n                //     for (let index in event)\r\n                //     {\r\n                //         let self = this;\r\n                //         // element.addEventListener(index, function(e){\r\n                //         //     e = e || window.event;\r\n                //         //     self[event[index]].notify(e);\r\n                //         // });\r\n                //         element.addEventListener(index, event[index], );\r\n                //     }\r\n                // });\r\n            }\r\n        }\r\n    }\r\n\r\n    addProperties(col_def, element) {\r\n\r\n\r\n        if (typeof col_def['properties'] !== 'undefined') {\r\n            col_def.properties.forEach(property => {\r\n                for (let index in property) {\r\n                    // element[index] = eval(\"(\"+property[index]+\")\"); //can get this as the element\r\n                    element[index] = property[index];\r\n\r\n                    if (index == 'readOnly') {\r\n                        element.tabIndex = '-1';\r\n                    }\r\n\r\n                    // if (typeof property[index] === \"function\") {\r\n                    //     // Execute the callback function and pass the parameters to it​\r\n                    //     //element[index] = property[index](this);\r\n                    //     element[index] = eval(\"(\"+property[index](this)+\")\"); //can get this as the element\r\n                    //\r\n                    //     console.log(index);\r\n                    // }\r\n                    // else\r\n                    // {\r\n                    //     element[index] = property[index];\r\n                    // }\r\n\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    createDataTableSelect(col_def) {\r\n\r\n        if (typeof col_def.select_values === 'undefined') {\r\n            console.log('select_values are not defined');\r\n            return document.createTextNode('error select_values are not defined');\r\n        }\r\n\r\n\r\n        if (this.checkWrite()) {\r\n            let element = this.createSelect(col_def)\r\n            //element.name = col_def['db_field'] + '[]';\r\n            let self = this;\r\n\r\n            if (typeof col_def['individual_select_options'] !== 'undefined') {\r\n                element.onchange = function () {\r\n                    self.individualSelectChanged.notify()\r\n                }\r\n            }\r\n            else {\r\n                element.onchange = function () {\r\n                    self.inputChanged.notify()\r\n                }\r\n            }\r\n            this.addProperties(col_def, element);\r\n            this.addEvents(col_def, element);\r\n            //element.value = data + '';\r\n            return element;\r\n        }\r\n        else {\r\n            //bad things happen comparing sting to int....\r\n            // let name = '';\r\n            // col_def.select_values.forEach(select_value => {\r\n            //     if (select_value.value == data) {\r\n            //         name = select_value.name;\r\n            //     }\r\n            // })\r\n\r\n            // console.log('data ' + data)\r\n            // console.log('index ' + index);\r\n            // console.log('value ' + value);\r\n            return document.createTextNode('');\r\n        }\r\n    }\r\n\r\n    createSelect(col_def) {\r\n        let element = document.createElement('select');\r\n        let option = document.createElement('option');\r\n        option.value = 'null';\r\n        option.appendChild(document.createTextNode(\"Select...\"));\r\n        element.appendChild(option);\r\n        let select_values = col_def.select_values;\r\n        //let select_names = col_def.select_names;\r\n        select_values.forEach(select_value => {\r\n            option = document.createElement('option');\r\n            option.value = select_value['value'] + '';\r\n            option.appendChild(document.createTextNode(select_value['name'] + ''));\r\n            element.appendChild(option);\r\n        })\r\n\r\n        return element;\r\n    }\r\n\r\n    findTreeSelectValue(array, data) {\r\n        // console.log('looking for...' + data)\r\n        for (let i = 0; i < array.length; i++) {\r\n            // console.log('select_value');\r\n            // console.log(array[i]);\r\n            if (data == array[i].value) {\r\n                // console.log('select_value ' + array[i].value);\r\n                // console.log('select_name ' +array[i].name)\r\n                return array[i].name;\r\n            }\r\n            let found = false;\r\n            if (typeof array[i].children !== 'undefined') {\r\n                // console.log('looking at children');\r\n                found = this.findTreeSelectValue(array[i].children, data);\r\n                // console.log('found ' + found);\r\n            }\r\n            if (found) return found;\r\n        }\r\n    }\r\n\r\n    createDataTableTreeSelect(col_def) {\r\n        if (this.checkWrite()) {\r\n            let element = this.createTreeSelect(col_def)\r\n            let self = this;\r\n            element.onchange = function () {\r\n                self.inputChanged.notify()\r\n            }\r\n            this.addProperties(col_def, element);\r\n            //element.value = data;\r\n            return element;\r\n        }\r\n        else {\r\n            // let value = this.findTreeSelectValue(col_def.select_values, data);\r\n            // if (!value) value = '';\r\n            return document.createTextNode('');\r\n        }\r\n    }\r\n\r\n    createTreeSelect(col_def) {\r\n        let element = document.createElement('select');\r\n        let option = document.createElement('option');\r\n        option.value = 'null';\r\n        option.appendChild(document.createTextNode(\"Select...\"));\r\n        element.appendChild(option);\r\n        let level = 0;\r\n        this.addNestedSelectOptions(element, col_def['select_values'], level);\r\n        return element;\r\n    }\r\n\r\n    addNestedSelectOptions(element, array, level) {\r\n        array.forEach((category, r) => {\r\n            let option = document.createElement('option');\r\n            option.value = category['value'];\r\n            let name = category['name'];\r\n            for (let i = 0; i < level; i++) {\r\n                name = \"\\u00A0\" + name;\r\n                name = \"\\u00A0\" + name;\r\n                name = \"-\" + name;\r\n\r\n            }\r\n            option.appendChild(document.createTextNode(name));\r\n            element.appendChild(option);\r\n            if (typeof category['children'] !== 'undefined') {\r\n                this.addNestedSelectOptions(element, category['children'], level + 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    createEditButton() {\r\n        let self = this;\r\n        let editButton = document.createElement('button');\r\n        editButton.innerHTML = 'Edit';\r\n        editButton.className = 'edit';\r\n        editButton.classList.add(\"button\");\r\n\r\n        editButton.onclick = function () {\r\n            self.onEditClick.notify();\r\n        }\r\n        this.editButton = editButton;\r\n        return editButton;\r\n    }\r\n\r\n    createCancelButton() {\r\n        let cancelButton = document.createElement('button');\r\n        let self = this;\r\n        cancelButton.innerHTML = 'Cancel';\r\n        cancelButton.className = 'cancel';\r\n        cancelButton.classList.add(\"button\");\r\n\r\n        cancelButton.onclick = function () {\r\n            self.onCancelClick.notify();\r\n        }\r\n        this.cancelButton = cancelButton;\r\n        return cancelButton;\r\n    }\r\n\r\n    createDeleteButton() {\r\n        let self = this;\r\n        let deleteButton = document.createElement('button');\r\n        deleteButton.innerHTML = 'Delete';\r\n        deleteButton.onclick = function () {\r\n            self.onDeleteClick.notify();\r\n        }\r\n        deleteButton.className = 'delete';\r\n        deleteButton.classList.add(\"button\");\r\n\r\n        this.deleteButton = deleteButton;\r\n        return deleteButton;\r\n    }\r\n\r\n    createSaveButton() {\r\n        let saveButton = document.createElement('button');\r\n        saveButton.innerHTML = 'Save';\r\n        saveButton.className = 'save';\r\n        saveButton.classList.add(\"button\");\r\n\r\n        let self = this;\r\n        saveButton.onclick = function () {\r\n            self.onSaveClick.notify();\r\n        }\r\n        this.saveButton = saveButton;\r\n        return saveButton;\r\n    }\r\n\r\n    createNewButton(msg) {\r\n        let button = document.createElement('button');\r\n        button.className = 'btn-new'\r\n        let self = this;\r\n        button.onclick = function () {\r\n            window.location.href = self.model.td.route + '/create'\r\n        };\r\n        button.innerHTML = '<i class=\"fa fa-plus\" aria-hidden=\"true\"></i>' + msg;\r\n        return button;\r\n    }\r\n\r\n\r\n    showWaitModal(show = true) {\r\n        if (show) {\r\n            $(this.waitModal).modal('show');\r\n        }\r\n        else {\r\n            $(this.waitModal).modal('hide');\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //all this goes.......\r\n    showConfirmModal(show = true) {\r\n        if (show) {\r\n            $(this.confirmModal).modal('show');\r\n        }\r\n        else {\r\n            $(this.confirmModal).modal('hide');\r\n        }\r\n    }\r\n\r\n    hideErrorModal() {\r\n        // $(this.errorModal).modal('hide');\r\n        this.errorModal.hide();\r\n    }\r\n\r\n    showErrorModal(message) {\r\n        this.errorModal.addErrorMessage(message);\r\n        this.errorModal.show();\r\n        // $(this.errorModal).modal('show');\r\n    }\r\n\r\n\r\n}\r\n\n\n//# sourceURL=webpack://AwesomeTable/./src/table/TableView.js?");

/***/ })

/******/ });
});